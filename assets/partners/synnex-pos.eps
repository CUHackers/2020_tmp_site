%!PS-Adobe-3.1 EPSF-3.0%%Title: synnex_pms [Converted].eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Marion Morris%%CreationDate: 11/17/05%%BoundingBox: 0 0 261 103%%HiResBoundingBox: 0 0 260.8375 102.5079%%CropBox: 0 0 260.8375 102.5079%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE 3165 C)%%CMYKCustomColor: 1 0 0.2800 0.6500 (PANTONE 3165 C)%%RGBCustomColor: %ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 7362 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD11FF5983FFFFA8592E2E05050506052E2E84A8FD6CFFA82E0559%FF840BFD0705F8FD05050C59A8FD68FF2E0505FFFF2EFD07050C2E597DA8%A8FF8484597D84FD65FF59050505FF7D05F8050505F805057DA8FF84592E%352E342E8383A8FD64FF5905052EFF5905050C0505052E84FF8435FD0B05%5983FD61FF2EF80505FF59FD060559FFA8050500FD0B05F8050584FD5EFF%2E050505FF84FD060584FF34FD130559FD5CFF2EF8050559A8FD0605A8A8%0CF8FD0505F8FD0705F8FD0505002EA8FD59FF840506052EFF2EFD0505A8%AF2E05050506050505595984A8AFA8AE84842E2EFD05052EAFFD58FFFD04%05838400050505007DFFFD06052E59FD0CFF842E050505F82EFD57FF34FD%0405FF0CFD04052EFF2EFD04052EA8FD10FFA83505050559FD55FFA80500%05055984FD0505A859F805050558FD14FF840505F884FD53FF8484050605%05A859FD040559FF0505052EA8FD17FF0B0505FD52FF59842EFD0405FFFD%0505FF2E05002EA8FD19FF050559FD51FF2EA82E0505052EFF0C0505052E%AF2E052EA8FD1BFF052EFD50FF8305FFFD04052EAFFD04057D83F80584FF%AFFD1AFFAF0583FD4FFF2E2EA82E05050559A805050605FF2E0559FD1EFF%832EFD4EFFA8052EA8FD04052EA80505052EAF0505FD20FF59A8FD4DFF84%0559A8FD040559840505052EFF0584FD20FF84A8FD4DFF2E052EAEFD0405%2EA8050505347D2EFD22FFA8FD4DFF2E052EFF0C050C052EAF2E05055984%59FD18FFAF7D8484FD54FF050505FFFD0505AF05050559A8AFFD16FF7D2E%052E050505592E2E0C2E0B2E83FD04FF350B2E0C2E0C2E0CA8FD07FF840B%2E0C2E2E592E2E0559FD08FF2E2E05FD082E352E2E052E057DFF592E2E2E%342E2EA8FFFFFF7D2E2E2E0559060505A859FD0405845905052EFD17FF59%0505AFFFFFA82E2EFF5905050584FD06FF2EF883FF5905050CFD09FF0C05%59FFA8AF05050584FD08FF590505FFAFAF0505055984A87D592E0559FFA8%A80505052EFD06FF59050584AE0505055959050505F8598405F82EFD16FF%830505A8FD04FF582EFFFF2E05057DFD06FF052EFFFF7D0500052EFD08FF%59F8A8FFFFFF2E050505FD08FFAE0534FFFFFF59F8057DFD05FF2E59FFFF%FFA8050505FD06FF2E05A8FFFF0C05052EFFFD0505FF0B0505FD16FF5905%2EFD05FFAF84FFFFFF05050CFD05FF5906FFFFFF84052E05057DFD07FF59%05AFFFFFFF2E2E05052EFD07FFAF0559FFFFFF59050584FD05FFAF84FD04%FF5905052EFD04FF8405A8FFFFFFFD0405A859FD04055984F805A8FD15FF%050505FD0AFF5905057DFD04FF2E59FFFFFF592E7D050505A8FD06FF5905%FD04FF2E842E000559FD07FF0559FFFFFF59F8057DFD0CFF2EF80584FFFF%FF0559FD04FFFD040559A8FD04052EAF2E0584FD15FF2E0506A8FD09FFA8%0C052EFFFFFF8405FD04FF842EFF2E05052EFD06FF592EFD04FF2EAFA805%050584FD05FFAF2E7DFFFFFF590505AEFD0CFF8405052EFFFF2E35FD05FF%FD0505A858050505F859A80505FD15FF2E05F82EFD0AFF2E050584FFFF05%84FD04FF592EFFFF05050559FD05FF8305FD04FF2E7DFF5905F82EFD06FF%0584FFFFFF59F80584FFFFFFA8FD09FF2E05F884590CFD06FF2E050C0505%0CFF2E05050605A85905A8FD14FFA80505052E7DFD09FF05052EFF7D2EFD%05FF842EFFFFAF050505AEFD04FF7D2EFD04FF2EA8FFFF2E050559FD05FF%2E84FFFFFF590505AFFFFFFF8459FD09FF0505052EA8FD06FF2EFD050558%FFFD0505AF2E2EFD15FF59FD050559A8FD06FF3505057D2E7DFD05FF592E%FFFFFF83050505FD04FF832EFD04FF2E83FFFFFF05050584FD04FF05A8FF%FFFF5905057DFFA8840559FD09FF5905052EFD07FF59FD06057DAFFD0505%FF2E84FD15FFA82EFD04052E84FD05FF840505052EFD06FF842EFD04FF59%05052EFFFFFF5935FD04FF05A8FFFFFFA8050505FD04FF2EA8FFFFFF2E05%052E2E2E050559FD0AFF2E050CA8FD06FF7DFD07057DAFFD0505A8A8FD17%FF84590505F80584FD05FF2E050584FD06FF592EFD04FFA82E050559FFFF%7D2EFFFFFFA82E84FD04FF59F80505FFFFFF05AFFFFFFF59F80584FFA8AF%0559FD09FF840505F82EFD07FF0505050CFD040583FF2EFD040584FD19FF%AF0B05052EFD05FF840505A8FD06FF590BFD05FFA805052EA8FF5959FD04%FF05A8FD05FF2E05052EFFFF2EA8FFFFFF580505AFFFFFFF5959FD09FF05%A82E0505A8FD06FF35FD08052EFF7D2E0505F82EA8FD18FFAE050505FD05%FF590505A8FD06FF592EFD06FF5905002EFF7D2EFFFFFFA80584FD05FFA8%0505057DFF05AFFFFFFF59F80584FFFFFFA8AFFD08FF0559FFA8050505FD%06FF83FD0A0584FF842E05F8052E84FD08FFAFFD0EFF2E050CAFFD04FF7D%050584FD06FF5905FD07FF2E0505597D59FD04FF0584FD06FF7D05050CA8%2EA8FFFFFF590505AFFD0CFF2E2EFFFFFF59050559FD06FFFD0B052E59FF%A8842E2E0C59A8FD04FFAF590505FD05FFA8FD07FF2E0505FD05FF590505%84FD06FF2E2EFD08FFFD04052EFFFFFF840559FD07FF2E05050C05FD04FF%59F80584FD0BFF5905A8FFAFFFA805F805A8FD05FF840505050C0505050C%FD05052E59A8A8AF84A88484592EFD040559FD04FF2EA8FD06FF2E0559FD%05FF59050584FD06FF3405FD08FF8405050559FFFFFF840584FD08FF0505%052EFD04FF2E0505AFFD06FF2EFFFFFF840559FD05FF34050535FD06FF2E%FD1B050CAFFFFFFF0C84FD05FF840505A8FD05FF2E050584FD06FF050CFD%09FF2EF8052EFFFFFF590559FD08FFA8050505FD04FF34050584FD05FFA8%2EA8FFA80505FD07FF05050584FD05FF84FD1C0559FFFFFF2E05A8FFFFFF%84052EA8FD05FF842E050559AFFD04FF84050584AEFD08FF2EF859FFFFA8%590535A8FD08FF590505A8FFAFA8050505597D8459592E0605FF84050584%FD07FF2E050505A8A8FD04FF2EFD1C05AEFFFF0C05052E0C2E0559A8FD05%FF592E052E0B2E0CAFFFFF592E0C2E0559FD06FFAFFF7D0C2EFFA82E052E%2E2EA8FD08FF2E0CFFFF59052E052E052E052E052E052E2E2E052E2E59FD%05FF590C2E052E0B2EFD05FF2E05050C0505050C0505050C0505050C0505%050C0505050CFD04052EFD04FFAE84A8A8FD5CFFFD1C057DFD63FFAFFD1B%052EFD64FFA8FD1A05F859FD05FF592E592EA8FFFFFF842E592E84FFFFFF%A82E592E59A8FFFFFF52595959A8FFFFFF7D5959597DFFFFFF845958592E%FD06FF5984FFFFFF84FD0559A8FFA8592EA8FFFFFFA82E592E59FD04FF2E%59FFFF5959FD09FFFD05050C0505050C0505050C0505050C0505050CFD05%05FD04FF2E05FFFF8384FFFF7D05A8FF830584FFFFA805348405AFFFFFFF%2E05840584FFFF592E84FF590559FFFFFF05347D06A8FD04FFA8052EFFFF%FFAF848305AF7DFFFFFF2E05AEFFFFA80583FFA80559FFFFFF34052EFF84%34FD0AFF2EFD19052EFFFFFF0559FD06FF0B0CFFFFFF052EFFFFFF055905%59FD04FF2E2E597DFFFFFF2E05FFFFFF0559FFFFFFFD042EFD05FF2E5905%59FD04FF7D05A8FD04FF5905FFFFFF5905FFFFFF2E05FFFFFF2EA805052E%7DFD0BFF7D2EFD180584FFFF5905838484A8FFFF840559A85905AFFFFFAE%052E840583FFFFFF2E05FD05FF840559FF592EA8FFFFFF0559840559FFFF%FF2E35A82E05A8FFFFFF7D05A8FD04FF2E06AEFFFFFF0535A8840584FFFF%FF2E84FF2E0559FD0CFFA859050500FD140584FFFFFF84585959FD04FFA8%595959FD04FFA8597DFF8459FFFFAF597D84FFFFFFAFFFA859597DA8FFAF%FF845959FF7D59A8FFA85983FF845959FFFFFF59847DFFFFFFA87D59A8FD%04FF595959AEFFFFFFAF59A8FFFF7DA8FD0EFFAF582EFD07050605050506%FD05052E59FD6DFF842E2EFD0B052E59AEFD73FFA8A87D7D59837DA8A8FD%E1FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (synnex_pms [Converted].eps) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-11-17T14:58:33Z</xap:CreateDate>
  <xap:ModifyDate>2005-11-17T14:58:33Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>104</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUPf6hY6fZy3t/c&#xA;R2tnAvOa4mYJGi+LM1AMUEgCy8a1L8/9S8xa6PLX5YaT+lr5/tatdh0to1Bo0npji3AVHxuV324m&#xA;orZwVuXDlqjI1AMc80/m9Y+Tbgw3Oqy+ePOcRrO7OYNGspl/Zit4eKSPH0rQt/lKarkhG/INU83D&#xA;14pfYHkfmf8AOX8yfMbv9e1u4ht32+p2bG2h41rxKxcS4/1yTkxABx55py5lZ5a/Kf8AMbzWn13T&#xA;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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -102.508 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 102.508 li260.838 102.508 li260.838 0 liclp[1 0 0 1 0 0 ] concat39.4976 0.561524 mo26.147 6.88282 17.167 20.6475 17.3443 35.3584 cv17.2857 50.3047 26.5601 64.4834 39.9712 70.4502 cv45.9107 72.6895 li45.9107 72.6895 44.0474 72.8721 43.5748 72.8135 cv31.0499 72.7549 19.4712 66.2549 12.9131 55.1495 cv6.47413 45.2247 6.35596 29.5684 12.5 19.4668 cv18.1124 9.12794 28.9234 3.16211 39.4976 0.561524 cvfalse sop/0 <</Name (PANTONE 3165 C)/0 [/DeviceCMYK] add_csa/CSA /0 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /Components [ 1 0 0.28 0.65 ] >>add_csd1 /0 get_csdsepcs1 sepf77.0655 5.86915 mo62.9146 1.62989 47.0298 5.84766 37.3165 16.8956 cv27.2701 27.962 24.6714 44.7061 30.6426 58.1133 cv33.5572 63.752 li33.5572 63.752 32.0513 62.6407 31.7388 62.2813 cv22.4722 53.8545 18.2183 41.2774 20.7789 28.6348 cv22.6373 16.9522 33.0274 5.23926 44.3536 1.84571 cv55.4424 -2.08008 67.4683 0.723633 77.0655 5.86915 cv1 /0 get_csdsepcs1 sepf76.3023 96.2666 mo62.1246 104.715 40.2066 104.596 26.2056 95.8536 cv6.53321 84.3916 -3.27393 62.8887 0.979981 40.4981 cv2.22071 34.5909 4.40626 29.0372 7.5376 23.8975 cv2.63379 37.6622 5.94239 53.2588 16.0445 63.5967 cv25.792 74.1133 41.0928 77.7764 54.6802 73.877 cv57.0435 72.9903 59.5245 72.2823 61.7701 70.9815 cv76.3023 96.2666 li1 /0 get_csdsepcs1 sepf92.5557 43.334 mo92.4966 49.7129 li91.3746 49.7129 li91.0787 46.4063 li89.0704 44.5166 86.3526 43.8067 83.4581 44.3965 cv81.5674 44.8106 79.9722 46.6416 79.441 48.4737 cv78.6734 50.836 78.9678 53.7305 80.2676 55.7393 cv84.3433 60.2881 91.1382 59.4024 94.3873 65.0743 cv96.337 68.4415 95.8052 73.6397 93.5005 76.6534 cv88.5972 82.2061 80.7994 82.3243 73.8287 80.9073 cv73.9473 78.1299 73.8882 76.002 73.8882 73.2862 cv75.1285 73.2862 li75.6006 74.8213 74.9507 76.8292 76.3692 77.9522 cv78.9678 80.3155 82.8672 80.7891 86.0572 79.4893 cv88.3609 78.4834 90.1924 76.1211 90.4878 73.5821 cv90.8428 70.8047 90.252 68.2042 88.2427 66.2549 cv83.6939 62.4747 75.7779 62.6524 74.1827 55.7393 cv73.356 51.9004 74.3604 48.0596 77.1958 45.3428 cv81.2124 41.7383 87.5342 42.1514 92.5557 43.334 cv1 /0 get_csdsepcs1 sepf132.065 43.334 mo150.438 68.6182 li154.279 73.3448 li154.634 64.129 154.634 54.2042 153.688 44.9297 cv152.685 44.753 151.442 44.753 150.319 44.6329 cv150.024 44.3379 150.202 43.8067 150.143 43.3936 cv160.776 43.334 li160.896 44.5743 li157.409 44.8692 li155.813 56.5069 155.637 68.8545 155.933 80.9073 cv152.861 80.9073 li144.59 68.9727 li129.702 48.71 li129.525 58.4561 129.525 69.209 130.233 79.1338 cv131.298 79.3702 132.539 79.4893 133.778 79.5479 cv133.838 80.7891 li123.203 80.7286 li123.203 79.6055 li126.63 79.3702 li128.107 68.4415 128.226 56.5069 127.93 45.1661 cv127.575 44.8106 li126.039 44.8106 124.74 44.4561 123.321 44.8106 cv118.654 51.0723 115.288 57.8672 112.156 64.7784 cv112.569 79.253 li116.233 79.5479 li116.469 79.8428 116.293 80.376 116.352 80.7891 cv102.882 80.7891 li102.882 79.6055 li104.123 79.4297 105.422 79.3702 106.781 79.3702 cv107.195 74.879 107.49 70.1534 107.371 65.4874 cv104.299 58.5157 100.991 51.6055 97.1509 44.9297 cv96.1465 44.753 95.0835 44.753 94.0196 44.6329 cv93.7252 44.3379 93.9024 43.8663 93.9024 43.4512 cv106.545 43.3936 li106.663 43.7471 106.604 44.1612 106.663 44.5166 cv105.658 44.8692 104.359 44.753 103.354 44.8692 cv105.481 50.836 108.494 56.6856 111.507 62.3565 cv114.579 56.8028 117.414 50.9551 119.541 44.9297 cv118.654 44.6329 117.533 44.6924 116.587 44.5743 cv116.587 43.334 li121.608 43.6299 126.985 43.334 132.065 43.334 cv1 /0 get_csdsepcs1 sepf183.284 62.2383 mo186.121 65.9004 188.721 69.6827 191.792 73.2862 cv191.91 73.1084 li192.205 64.0108 192.087 53.9678 191.201 44.9297 cv190.196 44.753 188.839 44.753 187.834 44.6329 cv187.716 43.4512 li198.468 43.3936 li198.468 44.5743 li194.982 44.8692 li193.386 56.625 193.21 68.5586 193.505 80.9073 cv190.434 80.9073 li179.682 65.546 li167.275 48.71 li166.98 57.8067 167.157 69.209 167.807 79.1924 cv168.93 79.4893 170.349 79.4297 171.411 79.6055 cv171.411 80.9073 li168.102 80.671 164.32 80.671 160.896 80.9073 cv160.776 79.6055 li164.203 79.3702 li165.681 68.4415 165.799 56.6856 165.504 45.1661 cv165.147 44.8106 li161.782 44.6329 li161.782 43.334 li169.756 43.3936 li183.284 62.2383 li1 /0 get_csdsepcs1 sepf222.926 43.4512 mo222.808 49.7735 li221.862 49.8321 li221.567 48.7676 221.862 47.0557 220.563 46.4063 cv216.898 45.0479 212.705 44.6924 208.45 44.9297 cv207.98 50.2452 208.155 55.9756 208.037 61.1749 cv211.11 61.294 214.36 61.4112 217.019 60.2305 cv217.549 59.2832 217.489 58.1026 217.607 56.92 cv218.73 56.92 li218.553 67.4376 li217.432 67.4376 li217.372 66.1963 217.372 64.9561 216.898 63.9522 cv214.3 62.5938 211.169 62.712 208.098 62.5332 cv207.803 67.8506 207.98 73.6397 208.216 79.1924 cv212.882 79.253 217.726 79.253 221.744 77.5977 cv222.689 76.5948 222.394 75.0577 222.571 73.7002 cv223.754 73.6397 li223.694 80.9073 li198.291 80.7891 li198.291 79.6055 li202.425 79.3702 li202.84 72.5186 li202.898 50.2452 li202.603 45.1055 li199.06 44.6329 li198.763 44.2793 199.06 43.8067 199.06 43.3936 cv207.685 43.8067 214.536 43.5108 222.926 43.4512 cv1 /0 get_csdsepcs1 sepf240.412 43.4512 mo240.472 44.6329 li236.926 44.9883 li236.984 45.5186 li239.35 49.8916 241.831 54.2042 244.43 58.4561 cv247.62 54.2637 250.397 49.7129 253.055 45.1661 cv252.109 44.8692 251.105 44.8106 250.102 44.753 cv249.983 44.3965 250.042 43.9249 250.042 43.5108 cv253.349 43.6299 256.541 43.6876 259.85 43.4512 cv259.967 43.8067 259.85 44.2793 259.908 44.6329 cv257.309 44.9883 li252.76 49.7129 248.623 54.6768 245.315 59.875 cv249.097 66.5499 252.581 73.2862 257.368 79.5479 cv260.558 79.6661 li260.558 80.9073 li247.206 80.9659 li247.206 79.6661 li248.21 79.5479 249.157 79.6055 250.102 79.6055 cv248.801 76.002 246.673 72.459 244.901 68.9727 cv243.957 67.4376 243.013 65.8409 242.126 64.3057 cv239.231 67.6719 236.75 71.5137 234.327 75.2354 cv231.846 79.3106 li232.852 79.6661 234.388 79.5479 235.685 79.6661 cv235.685 80.9659 li224.226 80.9659 li224.226 79.6661 li227.297 79.5479 li232.733 74.3487 237.045 68.5586 241.18 62.6524 cv237.872 56.6856 234.445 50.7774 230.369 45.1661 cv229.246 44.4561 226.232 45.8155 226.884 43.4512 cv231.255 43.7471 236.04 43.7471 240.412 43.4512 cv1 /0 get_csdsepcs1 sepf92.2671 95.3145 mo91.8941 95.8682 li91.2173 96.1065 90.6099 96.2696 90.0718 96.3594 cv89.5337 96.4483 88.8614 96.4932 88.0557 96.4932 cv86.9087 96.4932 85.8946 96.3711 85.0132 96.127 cv84.3208 95.9317 83.7339 95.6719 83.2525 95.3467 cv82.771 95.0215 82.4004 94.67 82.1407 94.2891 cv81.7457 93.7208 81.5484 93.0997 81.5484 92.4278 cv81.5484 91.2784 82.1309 90.3409 83.2969 89.6143 cv84.4624 88.8877 86.1084 88.5245 88.2344 88.5245 cv88.9644 88.5245 89.6202 88.5606 90.2017 88.6338 cv90.7832 88.7071 91.4581 88.834 92.2266 89.0176 cv92.2671 89.0899 li92.1836 89.2627 92.1187 89.4786 92.0718 89.7364 cv91.9937 90.1407 91.9439 90.5176 91.9234 90.8682 cv91.2359 90.8682 li91.2271 90.4688 91.2066 90.1495 91.1734 89.9122 cv90.8121 89.6582 90.4063 89.4668 89.9561 89.3399 cv89.5059 89.2129 88.9302 89.1495 88.2295 89.1495 cv86.9624 89.1495 85.9488 89.421 85.1885 89.9629 cv84.4283 90.5059 84.0484 91.2637 84.0484 92.2344 cv84.0484 92.8204 84.1768 93.3321 84.4336 93.7696 cv84.6905 94.2061 85.0328 94.5684 85.46 94.8555 cv85.8873 95.1436 86.3174 95.3526 86.75 95.4825 cv87.3394 95.6563 88.0533 95.7432 88.8921 95.7432 cv89.4439 95.7432 89.9659 95.7012 90.4581 95.6172 cv90.9502 95.5342 91.4854 95.3907 92.0645 95.1856 cv92.2671 95.3145 li1 /0 get_csdsepcs1 sepf99.3169 94.7325 mo99.8155 95.3106 100.503 95.7481 101.378 96.046 cv102.254 96.3438 103.302 96.4932 104.522 96.4932 cv105.649 96.4932 106.652 96.3711 107.53 96.127 cv108.17 95.9434 108.74 95.6817 109.242 95.3428 cv109.743 95.004 110.124 94.6172 110.385 94.1836 cv110.737 93.5987 110.913 92.961 110.913 92.2735 cv110.913 91.8721 110.852 91.504 110.73 91.168 cv110.608 90.8321 110.428 90.5235 110.189 90.2442 cv109.951 89.9649 109.603 89.6915 109.145 89.4229 cv108.687 89.1544 108.159 88.9502 107.563 88.8086 cv106.76 88.6192 105.866 88.5245 104.879 88.5245 cv103.887 88.5245 102.971 88.6221 102.131 88.8174 cv101.475 88.9688 100.868 89.2188 100.31 89.5655 cv99.7505 89.9122 99.3208 90.334 99.0201 90.8301 cv98.7193 91.3262 98.5689 91.9073 98.5689 92.5743 cv98.5689 93.4356 98.8179 94.1563 99.3169 94.7325 cvcp101.448 90.629 mo101.7 90.1407 102.104 89.7725 102.661 89.5235 cv103.217 89.2745 103.892 89.1495 104.684 89.1495 cv105.379 89.1495 105.937 89.2286 106.357 89.3848 cv106.778 89.543 107.143 89.7686 107.452 90.0635 cv107.762 90.3594 107.999 90.7178 108.165 91.1407 cv108.33 91.5626 108.413 92.0284 108.413 92.5372 cv108.413 93.2794 108.26 93.9102 107.953 94.4297 cv107.646 94.9502 107.223 95.3204 106.683 95.5391 cv106.143 95.7588 105.531 95.8682 104.847 95.8682 cv104.109 95.8682 103.468 95.754 102.925 95.5235 cv102.382 95.293 101.938 94.9004 101.59 94.3458 cv101.243 93.7901 101.069 93.0899 101.069 92.2442 cv101.069 91.6544 101.195 91.1153 101.448 90.629 cv1 /0 get_csdsepcs1 sepf117.248 89.1182 mo117.248 88.6495 li117.372 88.6495 117.803 88.6573 118.543 88.6729 cv118.904 88.6778 119.417 88.6807 120.081 88.6807 cv120.647 88.6807 121.133 88.67 121.539 88.6495 cv122.208 88.629 122.761 88.6182 123.198 88.6182 cv124.045 88.6182 124.68 88.6602 125.101 88.7422 cv125.522 88.8243 125.88 88.9981 126.177 89.2618 cv126.474 89.5264 126.623 89.8458 126.623 90.2188 cv126.623 90.67 126.42 91.0792 126.016 91.4454 cv125.611 91.8106 124.988 92.1016 124.147 92.3155 cv124.283 92.4766 124.437 92.6407 124.61 92.8106 cv124.784 92.9786 124.885 93.0801 124.915 93.1153 cv124.945 93.1504 124.976 93.1866 125.009 93.2247 cv126.269 94.4786 li126.604 94.8165 126.786 94.9952 126.813 95.0166 cv127.219 95.376 127.469 95.5899 127.561 95.6563 cv127.653 95.7227 127.742 95.7686 127.829 95.793 cv127.916 95.8174 128.086 95.8321 128.341 95.837 cv128.341 96.3057 li127.506 96.2852 126.901 96.2745 126.527 96.2745 cv126.094 96.2745 125.663 96.2852 125.234 96.3057 cv125.207 96.2305 125.142 96.128 125.04 95.9981 cv123.3 94.0811 li122.802 93.5313 122.379 93.0967 122.033 92.7784 cv121.859 92.6221 121.691 92.504 121.529 92.4219 cv121.618 92.2432 li122.263 92.2598 122.75 92.2149 123.078 92.1094 cv123.406 92.004 123.683 91.8184 123.909 91.5538 cv124.134 91.2891 124.248 90.9883 124.248 90.6534 cv124.248 90.3243 124.129 90.0479 123.892 89.8262 cv123.654 89.6045 123.36 89.4473 123.01 89.3555 cv122.784 89.3018 122.379 89.2745 121.797 89.2745 cv121.538 89.2745 121.282 89.2911 121.029 89.3233 cv121.013 89.4542 120.998 89.75 120.982 90.212 cv120.951 91.2383 120.935 91.9249 120.935 92.2706 cv120.935 92.8106 120.938 93.3868 120.945 93.9971 cv120.955 94.7481 120.961 95.1719 120.966 95.2696 cv120.982 95.4747 121.012 95.6104 121.056 95.6749 cv121.077 95.7022 121.113 95.7276 121.162 95.752 cv121.21 95.7764 121.289 95.795 121.397 95.8086 cv121.506 95.8223 121.82 95.8321 122.341 95.837 cv122.341 96.3057 li121.414 96.2852 120.484 96.2745 119.554 96.2745 cv118.724 96.2745 117.955 96.2852 117.248 96.3057 cv117.248 95.837 li117.873 95.8262 118.243 95.8067 118.358 95.7794 cv118.423 95.7696 118.471 95.752 118.501 95.7266 cv118.532 95.7032 118.555 95.6504 118.572 95.5684 cv118.61 95.4278 118.637 95.2129 118.654 94.9249 cv118.685 93.3282 li118.685 91.3008 li118.654 90.1446 li118.643 89.6885 118.611 89.4141 118.558 89.3223 cv118.53 89.2832 118.49 89.254 118.437 89.2325 cv118.308 89.1895 117.912 89.1504 117.248 89.1182 cv1 /0 get_csdsepcs1 sepf134.112 89.1182 mo134.112 88.6495 li136.523 88.6807 li140.167 88.6495 li140.879 88.6495 141.44 88.6993 141.854 88.7969 cv142.267 88.8946 142.621 89.0743 142.917 89.334 cv143.213 89.5958 143.361 89.9336 143.361 90.3458 cv143.361 90.7598 143.219 91.1426 142.934 91.4961 cv142.648 91.8497 142.204 92.1407 141.599 92.3692 cv140.993 92.5977 140.346 92.712 139.656 92.712 cv139.482 92.712 139.313 92.7051 139.147 92.6915 cv138.981 92.6788 138.817 92.6612 138.654 92.6397 cv138.601 92.5372 138.503 92.4082 138.361 92.253 cv138.533 92.1309 li138.653 92.1582 138.766 92.1778 138.872 92.1915 cv138.979 92.2051 139.075 92.212 139.163 92.212 cv139.691 92.212 140.128 92.085 140.472 91.8301 cv140.814 91.5752 140.986 91.2071 140.986 90.7247 cv140.986 90.2208 140.805 89.8418 140.442 89.5899 cv140.079 89.3379 139.573 89.212 138.924 89.212 cv138.616 89.212 138.272 89.2432 137.893 89.3057 cv137.881 89.5332 137.874 89.8672 137.872 90.3067 cv137.861 91.3711 li137.861 93.4454 li137.861 93.9551 137.872 94.4844 137.893 95.0313 cv137.909 95.3458 137.939 95.5469 137.983 95.6338 cv138.005 95.6719 138.042 95.7042 138.094 95.7315 cv138.146 95.7588 138.24 95.7774 138.378 95.7881 cv139.486 95.837 li139.486 96.3057 li138.088 96.2852 137.036 96.2745 136.332 96.2745 cv135.557 96.2745 134.816 96.2852 134.112 96.3057 cv134.112 95.837 li134.714 95.8321 135.094 95.8018 135.252 95.7481 cv135.301 95.7305 135.339 95.7042 135.366 95.6661 cv135.403 95.6114 135.434 95.4786 135.455 95.2666 cv135.518 94.6807 135.549 94.0313 135.549 93.3204 cv135.549 91.3829 li135.518 90.3555 li135.507 89.9161 135.495 89.6407 135.481 89.5294 cv135.468 89.418 135.441 89.3409 135.403 89.2969 cv135.382 89.2657 135.345 89.2383 135.293 89.2159 cv135.241 89.1944 135.146 89.1758 135.011 89.1582 cv134.112 89.1182 li1 /0 get_csdsepcs1 sepf150.37 94.7325 mo150.868 95.3106 151.556 95.7481 152.431 96.046 cv153.307 96.3438 154.354 96.4932 155.574 96.4932 cv156.701 96.4932 157.704 96.3711 158.583 96.127 cv159.223 95.9434 159.793 95.6817 160.294 95.3428 cv160.796 95.004 161.177 94.6172 161.438 94.1836 cv161.789 93.5987 161.966 92.961 161.966 92.2735 cv161.966 91.8721 161.904 91.504 161.782 91.168 cv161.66 90.8321 161.48 90.5235 161.242 90.2442 cv161.003 89.9649 160.655 89.6915 160.197 89.4229 cv159.739 89.1544 159.212 88.9502 158.615 88.8086 cv157.813 88.6192 156.918 88.5245 155.932 88.5245 cv154.939 88.5245 154.023 88.6221 153.184 88.8174 cv152.527 88.9688 151.92 89.2188 151.362 89.5655 cv150.804 89.9122 150.374 90.334 150.073 90.8301 cv149.772 91.3262 149.622 91.9073 149.622 92.5743 cv149.622 93.4356 149.871 94.1563 150.37 94.7325 cvcp152.5 90.629 mo152.753 90.1407 153.157 89.7725 153.714 89.5235 cv154.27 89.2745 154.944 89.1495 155.736 89.1495 cv156.432 89.1495 156.989 89.2286 157.41 89.3848 cv157.83 89.543 158.195 89.7686 158.505 90.0635 cv158.814 90.3594 159.052 90.7178 159.217 91.1407 cv159.383 91.5626 159.466 92.0284 159.466 92.5372 cv159.466 93.2794 159.313 93.9102 159.006 94.4297 cv158.699 94.9502 158.275 95.3204 157.735 95.5391 cv157.195 95.7588 156.583 95.8682 155.899 95.8682 cv155.161 95.8682 154.521 95.754 153.978 95.5235 cv153.435 95.293 152.99 94.9004 152.643 94.3458 cv152.295 93.7901 152.122 93.0899 152.122 92.2442 cv152.122 91.6544 152.248 91.1153 152.5 90.629 cv1 /0 get_csdsepcs1 sepf168.301 89.1182 mo168.301 88.6495 li168.424 88.6495 168.855 88.6573 169.596 88.6729 cv169.957 88.6778 170.47 88.6807 171.134 88.6807 cv171.7 88.6807 172.186 88.67 172.592 88.6495 cv173.26 88.629 173.813 88.6182 174.251 88.6182 cv175.098 88.6182 175.732 88.6602 176.153 88.7422 cv176.574 88.8243 176.934 88.9981 177.23 89.2618 cv177.527 89.5264 177.676 89.8458 177.676 90.2188 cv177.676 90.67 177.473 91.0792 177.068 91.4454 cv176.664 91.8106 176.041 92.1016 175.2 92.3155 cv175.336 92.4766 175.49 92.6407 175.663 92.8106 cv175.836 92.9786 175.938 93.0801 175.968 93.1153 cv175.998 93.1504 176.029 93.1866 176.062 93.2247 cv177.321 94.4786 li177.657 94.8165 177.838 94.9952 177.865 95.0166 cv178.272 95.376 178.522 95.5899 178.613 95.6563 cv178.705 95.7227 178.795 95.7686 178.882 95.793 cv178.969 95.8174 179.139 95.8321 179.395 95.837 cv179.395 96.3057 li178.559 96.2852 177.954 96.2745 177.58 96.2745 cv177.146 96.2745 176.715 96.2852 176.287 96.3057 cv176.26 96.2305 176.195 96.128 176.092 95.9981 cv174.354 94.0811 li173.854 93.5313 173.432 93.0967 173.086 92.7784 cv172.912 92.6221 172.744 92.504 172.582 92.4219 cv172.67 92.2432 li173.315 92.2598 173.803 92.2149 174.131 92.1094 cv174.459 92.004 174.735 91.8184 174.961 91.5538 cv175.188 91.2891 175.301 90.9883 175.301 90.6534 cv175.301 90.3243 175.182 90.0479 174.944 89.8262 cv174.707 89.6045 174.413 89.4473 174.063 89.3555 cv173.836 89.3018 173.432 89.2745 172.85 89.2745 cv172.591 89.2745 172.334 89.2911 172.082 89.3233 cv172.066 89.4542 172.051 89.75 172.035 90.212 cv172.004 91.2383 171.988 91.9249 171.988 92.2706 cv171.988 92.8106 171.991 93.3868 171.998 93.9971 cv172.008 94.7481 172.014 95.1719 172.02 95.2696 cv172.035 95.4747 172.064 95.6104 172.108 95.6749 cv172.13 95.7022 172.166 95.7276 172.215 95.752 cv172.264 95.7764 172.342 95.795 172.45 95.8086 cv172.559 95.8223 172.873 95.8321 173.394 95.837 cv173.394 96.3057 li172.467 96.2852 171.537 96.2745 170.606 96.2745 cv169.776 96.2745 169.008 96.2852 168.301 96.3057 cv168.301 95.837 li168.926 95.8262 169.295 95.8067 169.41 95.7794 cv169.477 95.7696 169.523 95.752 169.555 95.7266 cv169.584 95.7032 169.607 95.6504 169.625 95.5684 cv169.662 95.4278 169.689 95.2129 169.707 94.9249 cv169.738 93.3282 li169.738 91.3008 li169.707 90.1446 li169.695 89.6885 169.664 89.4141 169.61 89.3223 cv169.583 89.2832 169.543 89.254 169.49 89.2325 cv169.361 89.1895 168.965 89.1504 168.301 89.1182 cv1 /0 get_csdsepcs1 sepf186.908 96.2745 mo188.786 96.3057 li188.786 95.837 li188.141 95.8213 187.753 95.7891 187.623 95.7413 cv187.536 95.7042 187.493 95.6426 187.493 95.5577 cv187.493 95.4356 187.629 95.127 187.899 94.6319 cv188.257 93.9932 li192.47 93.9932 li193.159 95.1661 li193.284 95.3741 193.347 95.5235 193.347 95.6133 cv193.347 95.6827 193.305 95.7325 193.221 95.7618 cv193.137 95.7911 192.767 95.8165 192.11 95.837 cv192.11 96.3057 li194.966 96.2745 li197.227 96.3057 li197.227 95.837 li197.069 95.8262 196.95 95.8155 196.869 95.8047 cv196.613 95.794 196.455 95.7823 196.393 95.7686 cv196.33 95.7549 196.274 95.7334 196.226 95.7032 cv196.177 95.6739 196.125 95.627 196.071 95.5626 cv195.745 95.0606 li195.24 94.3165 li191.602 88.6495 li190.445 88.6495 li189.728 89.879 li187.6 93.379 li187.197 94.042 186.926 94.4864 186.784 94.7129 cv186.475 95.1876 186.288 95.4629 186.226 95.5372 cv186.163 95.6133 186.102 95.668 186.042 95.7032 cv185.982 95.7383 185.91 95.7637 185.826 95.7803 cv185.742 95.7969 185.48 95.8155 185.039 95.837 cv185.039 96.3057 li186.908 96.2745 licp190.32 90.5626 mo192.045 93.337 li191.553 93.3575 190.995 93.3682 190.373 93.3682 cv189.729 93.3682 189.152 93.3575 188.644 93.337 cv190.32 90.5626 li1 /0 get_csdsepcs1 sepf203.989 96.3057 mo203.989 95.837 li204.654 95.8262 205.05 95.7989 205.175 95.7559 cv205.3 95.7129 205.384 95.6397 205.429 95.5372 cv205.489 95.3809 205.51 94.9102 205.489 94.127 cv205.489 90.8594 li205.489 89.9737 205.479 89.4766 205.458 89.3682 cv204.313 89.3682 li203.735 89.3682 203.229 89.3819 202.791 89.4082 cv202.614 89.42 202.513 89.4336 202.486 89.4493 cv202.449 89.4708 202.417 89.5352 202.391 89.6436 cv202.321 89.8975 202.281 90.1807 202.271 90.4932 cv201.552 90.4932 li201.529 89.7422 201.516 89.3213 201.51 89.2286 cv201.493 89.0655 201.465 88.8916 201.427 88.7071 cv201.5 88.6495 li201.754 88.6622 202.025 88.669 202.313 88.6719 cv202.778 88.6778 203.675 88.6807 205.003 88.6807 cv208.287 88.6807 li209.652 88.6807 210.565 88.6778 211.026 88.6719 cv211.275 88.669 211.528 88.6622 211.783 88.6495 cv211.864 88.7071 li211.813 88.9297 211.783 89.125 211.772 89.294 cv211.767 89.3213 211.756 89.7208 211.739 90.4932 cv211.021 90.4932 li211.01 90.2129 210.975 89.9434 210.916 89.6836 cv210.884 89.5547 210.849 89.4766 210.812 89.4493 cv210.779 89.4336 210.693 89.4219 210.555 89.4161 cv210.116 89.3848 209.589 89.3682 208.974 89.3682 cv207.825 89.3682 li207.81 89.4981 207.802 89.9952 207.802 90.8594 cv207.802 94.127 li207.802 94.9102 207.833 95.3809 207.896 95.5372 cv207.934 95.6348 208.015 95.7061 208.139 95.752 cv208.264 95.7979 208.651 95.8262 209.302 95.837 cv209.302 96.3057 li208.251 96.2852 207.365 96.2745 206.646 96.2745 cv205.876 96.2745 204.991 96.2852 203.989 96.3057 cv1 /0 get_csdsepcs1 sepf223.122 88.6495 mo223.122 89.1182 li222.559 89.129 222.224 89.1426 222.117 89.1592 cv222.011 89.1758 221.936 89.1954 221.892 89.2168 cv221.847 89.2383 221.815 89.2676 221.799 89.3067 cv221.76 89.3721 221.732 89.4922 221.716 89.6661 cv221.71 89.7598 221.705 89.9395 221.702 90.2071 cv221.69 91.1075 221.685 91.5918 221.685 91.6631 cv221.685 93.8731 li221.716 94.879 li221.716 95.2618 221.742 95.5069 221.797 95.6153 cv221.818 95.67 221.855 95.711 221.907 95.7383 cv221.959 95.7657 222.041 95.7881 222.153 95.8047 cv222.265 95.8204 222.588 95.8321 223.122 95.837 cv223.122 96.3057 li222.234 96.2852 221.286 96.2745 220.279 96.2745 cv219.402 96.2745 218.62 96.2852 217.935 96.3057 cv217.935 95.837 li218.522 95.8262 218.86 95.8145 218.951 95.8047 cv219.069 95.7881 219.149 95.7676 219.192 95.7432 cv219.234 95.7188 219.262 95.6895 219.272 95.6563 cv219.289 95.6075 219.313 95.4336 219.341 95.1329 cv219.361 94.6973 219.372 94.2911 219.372 93.9141 cv219.372 91.6143 li219.372 90.8887 219.361 90.42 219.341 90.2071 cv219.313 89.7422 219.28 89.4512 219.242 89.3311 cv219.226 89.2872 219.2 89.252 219.165 89.2247 cv219.129 89.1973 219.063 89.1758 218.969 89.1592 cv218.873 89.1426 218.528 89.129 217.935 89.1182 cv217.935 88.6495 li218.62 88.67 219.407 88.6807 220.295 88.6807 cv221.292 88.6807 222.234 88.67 223.122 88.6495 cv1 /0 get_csdsepcs1 sepf230.252 94.7325 mo230.75 95.3106 231.438 95.7481 232.313 96.046 cv233.188 96.3438 234.236 96.4932 235.456 96.4932 cv236.583 96.4932 237.586 96.3711 238.465 96.127 cv239.104 95.9434 239.675 95.6817 240.176 95.3428 cv240.678 95.004 241.059 94.6172 241.319 94.1836 cv241.671 93.5987 241.848 92.961 241.848 92.2735 cv241.848 91.8721 241.786 91.504 241.664 91.168 cv241.542 90.8321 241.362 90.5235 241.124 90.2442 cv240.885 89.9649 240.537 89.6915 240.079 89.4229 cv239.621 89.1544 239.094 88.9502 238.497 88.8086 cv237.694 88.6192 236.8 88.5245 235.813 88.5245 cv234.821 88.5245 233.905 88.6221 233.065 88.8174 cv232.409 88.9688 231.802 89.2188 231.244 89.5655 cv230.686 89.9122 230.256 90.334 229.955 90.8301 cv229.654 91.3262 229.504 91.9073 229.504 92.5743 cv229.504 93.4356 229.753 94.1563 230.252 94.7325 cvcp232.382 90.629 mo232.635 90.1407 233.039 89.7725 233.596 89.5235 cv234.151 89.2745 234.826 89.1495 235.618 89.1495 cv236.313 89.1495 236.871 89.2286 237.292 89.3848 cv237.712 89.543 238.077 89.7686 238.387 90.0635 cv238.696 90.3594 238.934 90.7178 239.099 91.1407 cv239.265 91.5626 239.348 92.0284 239.348 92.5372 cv239.348 93.2794 239.194 93.9102 238.888 94.4297 cv238.581 94.9502 238.157 95.3204 237.617 95.5391 cv237.077 95.7588 236.465 95.8682 235.781 95.8682 cv235.043 95.8682 234.402 95.754 233.859 95.5235 cv233.316 95.293 232.872 94.9004 232.524 94.3458 cv232.177 93.7901 232.004 93.0899 232.004 92.2442 cv232.004 91.6544 232.13 91.1153 232.382 90.629 cv1 /0 get_csdsepcs1 sepf248.119 95.837 mo248.756 95.8155 249.12 95.7969 249.212 95.7794 cv249.272 95.7637 249.321 95.7393 249.361 95.7071 cv249.402 95.6749 249.436 95.6075 249.463 95.504 cv249.498 95.3682 249.538 95.0352 249.585 94.503 cv249.607 94.1993 249.619 93.8067 249.619 93.3233 cv249.619 91.5665 li249.588 89.9727 li249.582 89.7071 249.566 89.5352 249.539 89.4561 cv249.512 89.377 249.473 89.3194 249.421 89.2813 cv249.369 89.2432 249.283 89.2129 249.164 89.1915 cv249.044 89.17 248.695 89.1456 248.119 89.1182 cv248.119 88.6495 li248.809 88.67 249.316 88.6807 249.643 88.6807 cv250.824 88.6651 li251.573 88.6495 li252.692 89.6329 254.049 90.7657 255.642 92.0479 cv256.788 92.9717 257.738 93.6944 258.494 94.2159 cv258.525 92.9532 li258.525 90.9883 258.493 89.835 258.428 89.4922 cv258.406 89.3575 258.357 89.2676 258.281 89.2247 cv258.156 89.1592 257.733 89.1241 257.013 89.1182 cv257.013 88.6495 li257.674 88.67 258.278 88.6807 258.825 88.6807 cv259.346 88.6807 260.017 88.67 260.838 88.6495 cv260.838 89.1182 li260.169 89.129 259.772 89.1622 259.646 89.2168 cv259.602 89.2325 259.571 89.2598 259.556 89.2989 cv259.473 89.4844 259.427 89.9044 259.416 90.5586 cv259.405 91.2139 259.4 91.6973 259.4 92.0079 cv259.4 94.4473 259.432 95.9258 259.494 96.4434 cv259.391 96.4932 li258.942 96.4307 258.486 96.3682 258.022 96.3057 cv256.268 94.9913 253.778 93.0137 250.557 90.3741 cv250.557 93.1016 li250.557 93.6661 250.577 94.2549 250.619 94.8682 cv250.641 95.2911 250.673 95.5489 250.717 95.6416 cv250.738 95.6856 250.774 95.7208 250.826 95.7481 cv250.878 95.7754 250.969 95.793 251.099 95.8047 cv251.451 95.8321 251.709 95.8458 251.872 95.8458 cv251.904 95.8458 251.958 95.8428 252.034 95.837 cv252.034 96.2745 li251.003 96.2745 250.417 96.2745 250.275 96.2745 cv249.745 96.2745 249.026 96.2852 248.119 96.3057 cv248.119 95.837 li1 /0 get_csdsepcs1 sepf102.55 39.1934 mo96.5074 25.7139 82.9307 16.4522 68.2198 16.3233 cv53.2784 15.9581 38.9102 24.9356 32.6675 38.2198 cv30.3072 44.1124 li30.3072 44.1124 30.1617 42.2471 30.2295 41.7735 cv30.5494 29.253 37.2842 17.8116 48.5254 11.4844 cv58.5821 5.25196 74.2359 5.45801 84.2081 11.8116 cv94.4283 17.6358 100.17 28.5694 102.55 39.1934 cv1 /0 get_csdsepcs1 sepf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Marion Morris) ()%%Title: (synnex-pos.eps)%%CreationDate: 11/17/05 9:58 AM%AI9_DataStream%Gb"-6l],MdOXBi+rXSHgMq28dE-Naa_#P&g&Nr:Jh%E]CeQlhsK^,M#<82[1lDDrmrRtnV)%Vd`B1f1eJGl0`.C7g"LPI])NHXJ\%IWGJf]6@V2p$Od5n,L_[DE`n7gjB`PjKk]3:O_k!^\['XD_>71[p/=sk*,0jLN9`W[QL@2]\Q'Do$##KkO79AIeW4_^4-+[qO;EK%n)(eXqO=+JIWG/nj]>5b]m9SKrp.%#I!a=[2o*kF[)'M+o>PWSs6N5TS)Ad@p\a0c044b=bnn^0^\ikro(+g8U&@U`qpX0SIOde^%k%?V]H0+k6Dn^Z"f%tZCGJCZbkC<='5<n##:s7,ZVpb)4:S7[IdR]tDfjk;lb?r]["&H!S_'AmUh1,@nol%S@k1d)Sq"Cc_n,E&W%3UD6@rUtGR^A.CZOVM??/NqsTIbSV:0*(^)@"muh9S2&Eo1=i8[YC;i6HuuVZuM:N\rH<D*QbM"s6B:GIs1EZ?T`i2mb@Knr0I-U%`E1C(ptaQZIeqUp/#]QnhR!k$rT/6A?@VpWn%SX!d%ni=pt.gEs75iPTA@H]m*hFWJE0Eh_>`9c9_m5RI.?lJ?@OINo)?mX5f1ib%qIVtjo65+[IIW*E?ZUqjJtN)2ot,^!s-\o@PM4c..j`BGlKq,0n3?bD#cZYP(iM`B'XsPOmEIrS*nWKa6:_$0-4BJSTo,IlrRGi#%HM=aAns0`E>IeT"B2[%4J,Roa45mPke+jf:TJ-<erdPD`Yjh%hYM\#4g9:M;\)4mtcZ``D-)ct1]d_BdN8S$`iSDBfhgQ_sV]'LQ%kNi.hF8q#66+<?]8I9muMSI3Ihrh=5;o69uiRa=`CJ+Ntkm:/WWER]L<d^q_X_L;*>+_D!cS<dY%($oC#>^D3<b%d;rX44NebP/)%k;/\lTCL,#N&FI-q"<mN<]p?QK\rDnp^B[:nT$a>,Cd[rrd,7^K"o\?F2HgJKfSs&q&<q!^X36A_V^`i@tN$9:A>dc0I-LTSqncf%N#CSmbT$Q`ME0Xd`$XB&<gX^&7[p;'^jLPaEoNHg,aRpYTB+3VHB+P+j4c;/?R'L*5A5cHiG\A,($)Il)cmIJU(uhR.nm&6=j.D+%iu;UNouGr03?\)9XY<!;buH$S&?gIGhWQeHOZWO:RW3_n3a*,6NYg!2UW:G90#!Z8qg,N$s$7UJc7'F5_pb,5J&V?T2d2?X0gFZN%cf/lM_<ao]EQ\!g6d5'0Ui*)=V\Q*fN1?,!>4?t!CJ)6\FMp5t9>"]o^*5a"NZG8"mHgCio6:2maLO)uc!5>LL-7Z`+4BVlg\K(X%-b`gZS`P+MBqNoBFMH9HT&+2&GP]%rNob[00I"O_T&-a2A+fBgHeC'E$t7ULpm55?fUj#VbPj0pjNR)i^\i0L8L]>Zs7/s$r4`3S%5J?Z8n,D`mJ*ub"bPj0pgu%`#r\+;AIe)tnaSmjm4?i?5r\+:fo+1XWedd1N?2<<knR%\kbi`6&*^Y*t.\eLPms5lA0g9JD5BSLO%f(30sHDkKSNo,_sCX:c6e&0bFng(tbqf<Y/Z9LLW&+g_]fkNUha"lAdSXa9>8tPJhhg:Y:$HBlj5!?:YoP*4T?Ta#i0KS1*19-RM%>cB*!?hUDZ?/EnqcXZTl1<E5!qlRrP1"V1!FC^q\/44lgQl5%b:Mt!p()UP,"P+POk`a>cs!7UbP!8nBc?mmU#?or+b^2E5Y4UTd%G?]G_>Dtg$CUc=i'g+-OHWjL*rQB"fFm`eiGE9Nfer*<pIo"Lbi(^on4j-Ap#F2WNXZbl$qAu4-)/l,<lfb6'c:snUR'X/F^jjUk%l$m3u@0>XinSu[W`Gg[iTJ4?Pc:*2kodtDHgRRB-MWmOoi&pP:5+ulsIXG`"]eVpUP<A_=U/H%*O^W]d\'^u03*77`8u2X<[8YFI%4-"B/mN0\'?=^K-nI:3Tq_+Z+KXlX`n?b;(J)*6gqbI`*pVZhk:l);'7u:(HV6uoaY5CgQEX[uuM1[2$4`6WK>3#or&+_^EbJa?7%5G`!T_4?Q5CmKf9d(-n9jn=4E`/&E7XUS3ANe9.)S$9qD%NY/\rmisO^2Afa:r1V@!QA!Vc3MYBTDteD83"Y5O8Y*d#t5VW;lK\&%BA(@gFGHIXP]JUVS5-^!;^/_9VS[9H5P>-4.W<F6+*'r3a*Zd:gF3`ia=sVn#d26oOd#'*S6V'/Jt)kSf"%#1#P"`p_`iNQT'5#D%\D/fnF__L)[IYs=e@EHm-9`e/-S?d%mA(!TnPDemS/j=hnB7#:EP[b1a>G>p"s;5OFZiB.5<I.;#LVGup6>@\GJ3^IZsHG3RQS&=%NcZOB^(^1AjI1.n#FcmfS,M/o,P-k8bjn`4K_FbSV'D?X`q=BKYZWjO=cRIAjmjb[WQViIGf)T_&#>ARF3.@O3"AC'BqP!fpS/tV%4)RTWN@+j1B?o79.aQt1cG9sV;,;Sc1Pn*.aR+iN,Mfnamq0d!3:EsFX3hj[r/OjN4jSg,'fp6Z/(U-[hJnDJX]SUFFS6Bakto]E%`S*FAqG,;2T7+)BCuCSRiN2QeY+1KpBn_p&`m\e3j9r;taqa4I>4ulp)noN:_g/.k;R)hm^,men_l+aI4$_[rSm\lPpVj`b_bZI0%g_k"_`j"7m?0Lms0%ib/F",72qtoM);g6?YFARneCs!R1AYqo9;80+gCi_#CZ9J4Tg`!kY<mj0@b+;BZhp^'6Y*2bMh'%%.g#b.%%]<CU"S4JPr?9G>Gf+Hp5?"S*Q>L#[.K1c_:5Bf.A,F*C^>k`A9qmcaoo,MhSU187j4?LR(M:N8+:;hEE$/9]ShtP<ikDS0X&r#pV%V20C0m8WNe0CeF/YZ!@'+3G)3YfgU<A'W]f5cgL9<3\P6ooMg.B4`4npU[iIh^?B+iH0+3C2M/29:f2NEp)n$h^KD?+J7>$''IWU%PC,9GANQN#"j>3;pTYc7dr"Nn\b_MNFm%q\dVG63'=uKF\b&W]nhd9U'$_NP;\jlJP?LtXP(+Q$'g;B\?[/T1Q)j"'!Em6Qf3?q-%ElQ0:gcBY`1Lm?^8]=]?_7f(B=RT"u_t?6j8!dEg46q.Ra]p/_Y4aK=jfW+gq;Q%VER1u[3(b5MVgJ,_7m&5<rOcE[\kDePg!:;T%"8hL]j^IGN:=YB6PqNbBNk@meTXO3-O2&rcigt@Nc;'"tF23WRo%i?=$i:Z!C<B$`H+5dOi*JSh3SJHXq=qI@jk[i9JTZBH;Ef+Y%^3c\t;N%0X4'1')+JV$eF5Q(>Pr,DakU2gi,#>fZ7Ci*5jE@'_gc\bXi'F"'bAMa>S"liT!F.p:Xuf+GQQ2sFGV*!I,JKpH?rEn;%(Oj(9G;--booD2Pgtn2r#$c?'3BfK2`ep0j@<:/JNcir@NrO>%KY$uT[IaCsFa\J&^@naNLC'B\Mu-JU4)0&VL_L4VQ"hMP$272o%200jp43Ch*$'5,`qI2VXh)QN:10[Ho'<sUqGAnpW>Ro96lR"\18+Z^N@sjTnWr4LBp\:1TUKUHLVh[Ks/]3][D;Uu^m_htQF/hAQ%3G/Ta-+-kMI\`g]G.gaEcZ>`3q$Z$4,jXf#5+e^<JN#iL?M;e,4F%S>p"kl%9[Ge92O$+=-L\QoVbuF1DYH<lC3li'RhiX7m7T,1%,OKYH4?dUa1:b;ph>_9ZcYX+n0pRR_?(qdV`uj\MC9`#(mV"@4fAA+ah;japNl`$Zi&Wj:\6WXs6_S.3a6p=FcN=%*DW2!Tp[t)?%jua`o1FZ9PC4hbcb5jrgh'F-*C[61R?"NUTSu$0LjZK0fK!nX+G?GN[Z'TiVoX)Mm_k)96Bg9DW@,']_OmapU4SeEpGGr`*8#lW,%\Rp?Hl?\0lO*DcPcup`ZJ<)Xc<P/u`m0UJsh2d->qoRm10B([HJ">K3L%kB^pNlhulh>>Ss+\;5s41O@IJrPW^SBC]^]3Skhb3:=%hSBMFqIfc's6:D=^6>2grp0=9rU(carVHKWn*[o;s.?K5IK?Y<fC+1f:B':_2tp[/pW[VproO+U2a=u92R&h+$\&$MgU6]Eh]Zi$%h#H6Y&*j&i`LAenrT<E!IeVU#T!*9djnJSB%mBg;(I#P.ip53C+8U-Zqp?cUI9'<R)s-Ufg%gm\55p:$]`$1NDnc)1mG@@7g&Lr1%;1pLMS(I,Cr+:,iYPZ+AIJ(8U5Mk)2lX.F,qX(Sq$@R<rrTcE2J%)(j6G@^=jitPgnb)?7e1F/al`]/n.9QE<]<Aqs]eB$T\%b9A%c-<0$rSi#$^M(_0,.hLD+.mrOOc>QCmb]T\s8CPVI/0%Dae.Deh>NfrT)\-V^A57qC<+Au2qq'>\c;6m+/f-fP'nods69H'0>'Zj%oV_C^T?:)]8l+t+4:+f/I!g<d4?q[ehE?n>rn&:X@sQ:Z8bbf#guK`*I!Blq5MSKY4cG/F''<%5b!UVK&+Lfn_4Dap&*NQ[rd8o2%kC.=3H7nB.:?Qj;60A12rpg!Hrd93FIs4-FqgH)[pZ4TrVu(]liq#`p`lG]H]CXkWh;')NJ9G#_b$D_SGO\GhSFJEWa29ltqf+R7%kbF+e>V_?sifJ5h5P<(rd*MYs\Cp*Ee6B,ii8!b*bMh!Cg8"/MF1Z@7D7&/'X0&ba;N!+`3Jd!2IAl=T?gm9Y]s_*[WO\lECT-!e%4I*r2U05#[G:F<7;G/HA:7kWT&^Hpho0Y_)qg=`cS;o2Q>]S+=a"/T5H:j7_+e@)1\k=:@;ei9YOZQH50nlu'SFR3\*:Mon*3mO"%CFh3\'OqPk$W#_9Lf>5Z_d++QLDFVQ+bpb@#[of3ZB1QWKs5niR&J_5%gRCQ-;SR7l$o53S"KWDrbJ26K\D[X7\G9ZHMYae(<HG5%Vnd6BfD/^$]762)m'M#.4O:e@qYaV0VYu94?:g<L&>c%t.Z0+XM1:\:U4.]B2LYd_:PqVj*qXN^ci$EhH`u)8;[i9HmF1]+m8NAh%\+uYpT4";YPW!o"?(Q.Tpj'*i=[2ZS\[0W/:Ua-K:UNtYa`8/&d]CX7O8fO_g%^]Kk3#T+&,&$LkMACH-_Z2TV1tZX_,%C5ePEH2%,EoI?\!]m<j(E]?%6Z-\4Xr&RF10E.IdZPYm*kXVlr3RUm#t5ZF@;tOc<mM<q)A<F2u[@cl+`i;afh=lMpM4YF8t6@kF^cMfg#GS%Vd4]8`Q'mbC$qpJ:EB2\reW9lQ[`Q&Vm,P1gOJPPn`'.ZnMss*::=$oceZQQ]_M,W:Kp&]\ZaU\\bP6D:O;R$m2o+?Hskn<r$/!K%GZ5"&gr:[C(Y\WqmJg#25CJ@]s*W7%#Q3ITN-qplc^Hh4lo<RP91Lk%mu-2KFjCfq"nmWt3>e/X,[-:pI7T,gT2)lgU_N3\mQ5q\%_m^+7P&E)4HJFU*3m@g;-[hQcnY;'K?*TH_K00nIN9#i[kGOrMkE?sjIb=MUX%2\*.,SZbS,_H8mO,Z>q!FjYJ;XL^*`,tK[gsdA%#Q)$$Ti/q,CI_u!l0MY_nNR_#<4#MOVM#M'iJT=1f7goiFaV\]$bB)8SZ7T&'_uB12GbA-UKK>(:5UeLlE#5U;ER@<2eLfdEd'P^%9]8Qu*-HoO<tk-HZ46554$:TmGWH-G#$INCj"@WURbC-sA1sKb:Hb!kU!Fk)Q=NHRp0Em\2e4#eb?=H[B@<!jD3+oqE`No8Ze@t\%Y9A\R]c:VpEi;,-8I&C4R#HnBHEDBO!Uo(p4NiTVfUmiHK?ulHe$@&og#VcFEf/_sC&/sMlI/>u5S2pGEnhEjG+0Jd"$q9S*'_NL%r$7aV#gjnXYD\q*:!W2NkP2`\k7;U95KTc/6;:%sq]b3P4,Eqk6kHjEJ`&fsK.#>H6-(U6^edF<BFeCELc^_GcA;+>G`mIjK`%!(%*(;-6-5+B28`X2'Op@+CSkdpgTM,r#"CWLgaK.doO]RHCK*\4OZ#YOC2q[rAOTXgmT,W:;noM.0QC[HUh"J3omX8=.>C,2NF!G`6%@h\=cGMfpN/\>q%h557S*d=OLb*-\cI7rj+S3-8N"8CVqgi^3_\CjVuVthr\qWUW&6R`t]%I-,-KnIC!b4/=s'15V'?:b'kqm@j6%KD(e_J#<`NFoh:;G/@C+"82g\:V&&7P742RN^S$PKRPHZ]]j%EFr@l&Y\EP"P9RLtp,<$IDZ]DBJ9?Z\*Tk$FPoinJf2&a!LDB#A%I6P4@r"8>lrefug9l\`IF1T_fj$@V_Yf_>f@Fi?rFB)[#=-Vg-WQL-rE4XD\n#iV27i?dkkE!Klr]+8?kL\5DCWc/P<TDP^P^H1W%(4'sqnK2Y0)=bQd,CoZ0:7Bke$IYD]6^3)]QSK?"cF%"4T$.,VG3uj%fA/KPa2M`_=FUdH^BXT.2Hd'3Kn\ass)T_c^\m)lGQ7L<%pHLgcs4V<aJ)d\]j0$C-_n)h?;>tfcr$[StI_7dl'ZX!6?62=gj/3tPNuu@2duTj9O5fs!a33L5EVsoY*l"M(5NU4f^#C9/dmnnJ%J,\VQ(&ZM$ngAo^LTd&qRih,[*=NlOp*4*s\mfgYF$D;d=WdV?bo6Pij'qPE3J7*r)<YpMS9\q(SM%@cEJqSOMcI7q]73!1]$/"6%IK<N0BS#hF+Zb3LGM6LF41lX,V\d+92AR9s%hAOQ9Pn_R`C"%K$J(MO#9DqBI[L-.q<KtXhZ*T;s18%%f3c2fc0Lj+atI,7&U!LD%5KGqG*_A'1Wm72s%/Q,U?Y@dpRm(*in,H?VI?dg)4so8rA^u9`=e@l1jF<+k]84?hO,)'!ni8@qqrMn.I"m,Gb5(a,><[3*Pi\+l%-S6Dr*M)hp)$P$LLTX#$s#_j)oDID@kG8%-5@aN]jjW@im[mJlplBQa`1&H`lk0JkFeof'Qass=Y5S.#4nIiiN+qAr`bR>K'#A$a%J+`_HL_A0dPteV6s-(9H[rA53k2633?iQJjkPldBhr!LaJ%GH:s1R69WUPE;V+p]dr[WE0P5in3r4b/gO3RZPVuQ^:r!a%[D(kV7%c%#\[4oJRaqj5I>rndMK]u"O!c.cpcP<@u7hoJl.]8#(MNVPZN]p_0PI#BHdrk![9)ru;q9YYlUs11-[j0ihgHNX;Z1l*n6q8F<*%f=aI$18m2:qmQME\r<W4.JVMkJREUNZNL6=N'N+spCZtcrsY+u%m=<@_?=.!m-%F@N.,G%@Fj$,<CDdnBKKW=D)(3mBPEQdG*lIc%b+[pM?*s8bP]T!?B--1]X4V`Y0BT[NFdTYOSCcKG@@(gkMmXiSQgK/1CJ0Fg[e2Z%4%7pgc:_ke]U[U-G/C?Jjh00Q'6_chZWLEM%jJ&3k@;S#5(N"R1kUBi>(MH!<=g,68_n>Bu][jM$]55YnX=XahD!,kA><;,Vm@;)6FZc`Ad;h7L[HUpK2SGX2g2sLKZ)LH+BkWEI%Cc9>K1n8?(CarX@N0YI]FocHd&a39fM7&Iup-q@OC"0FHEmWYk[+cbY@Vt2!V'l8PG/XF9-@1*!^-_.q1"3d/d>,<ASZn$\52s!;%KO(tXJZio<m'9tni6\TWXQAQfHr$k#EuKJ3/k]E(?+-;k?eRR-ZE5dqdaUP=noD+_g"+P3Vmm`6g31d"U93I'D*&'jU92aND*)BW%fe:)]]!]Y?is,3[pfXuL$l_4gQSVk#3pa/ScXLbWYfjI=Mm]\)?M)G"+1`c>>@,UVL"g%AaIK=cZZ_&<QDS`+(JT;f9@GoOMl&[l%V<ON7AZqW@g8W?G)SWb,rIJPiG"LQjH?uB/NVk0HelS^8oD<aH7KH+L^\`N;A;IoCG=d:dikJ^6QdZJ-^mDdlqH%i1fstDmV"m.q%^[=F7\G=BV^AD2Vh[Yg]E3OXeV6Mc@L<"&Yn%LpE2Vdpb&q*P=1hchg=5TK(I<f\M7f$MlqlB:)&jWu:$Rmnm4)[aD];kc&V'gOB%B73SqaZOK^\K"P]8S*Aj3_Jtcj,eqDVS,\ja0?[UKZSqX2Ni?=F;U07?ChRNa&:`c>$`RDf_2kPrVPq0.[Kq$>87UTa:cTZ3NP:H%c,T*#JI,;W>j-O@/5%Yuep"0GF>Rl>(;X>p_'6oWkq7d*G2)<OTad5j]kqcUA!;<n.Ta9b.<0/u=7CBL@qAIlZIn<\A<<1/bVLmc%&.,sb)<A":G#j4>HppQAO@3]mD2eW25aO39!RuOd7<jN*e_:dSQL-TQ/A[\H8Z!h:J?5)@+jOWm,[p8Q3UJI6EWda&$BEV*9=lcA%jM#f,a$0JNdb2D?M_<1A`-05NA+*+T!SWYE2B2ZL:hsVuJ[=auX/.:E*#uR])*!h6lg7DWFh:DQ[,g">PY^PB[!bV7DSh`!-#n99%`O7nsjePD3;mUANIN\EY["VS-5Is_P7B9-h-:jOXMn1@TTol!F:PuATBeRa\Ag?+n9.T6pa1Z@jXNT=pkX0J4?<<@4CY;o,"bZsb%W_Q'-J.K=C;D(Gh_SQVG<lYM9CgfW?2q%.2N%ZZ=h)S@%;6KMKA=6j9.dGA6Q:?D<XF8&rF'48>JG$4Sa5EK^@[4d7G"sOfTu(j:%#o",o,pgLid)#"e&I$#mf-WfhZ=hoe#O")g0i7E>]MkBj%2j<&kU;Onqk0^U=/d5[eV0!tjm)rg8$X?]cRX"XA1tN/LUe^-@<b)u%k^99/l":5p('P,2\tA/JCNO5WG.Q-fc3n%E.0(t!\u`*Ya+_]_P0"EUrk91]9i_\@7E>H5@_!I<kbP:)#N.!2JE14O;&$b+*h2%7%SH,"^noO1&LX_CNgS[_Q9@mMV#m!iaA_-sNl,X6'oF%XOYlL*')4\$9:I*#]%&t_`mK8eeb<;m+de_ZI-P>"-a'?;`LQP/1e\]L`%XpZhO_2cnuCmbgH9`""R[r-o?PoQ2HAYDS`bd3^"eJm);O6Xu/.,aH+b?H]WW-c)$\)tngN6D$`\4Dg9DHruZ`(-HSab5NY\iC$O%\rpRl#Z>1mXu9Et3_3!<E];T>+`4[(*fTX1(M-$u.\)MM+Z<W$Ekk^,>ba!X"U5%Wi-)mOH-sp@^oV6&/5%KkeA<8\R^b3b,Y!>u%B5HYq0cml&]<1C5__^dA9,s2%<6@8Yo"/cp8@h<UQFNZrX$LeqI)pK@bp*9V0'MdI.TFW:$JF&78,6:`[RF:/(^UIlAMV\$<jAIh%_V#bMS0\cGiaLahilJ8T-E>2p$m@6%``eI#V*?+`(\X"fq;S3gCI-e-N+Zc?8$je_m:b+(.NKCE4XrD\MJeV2<1A,,ZT7"p^XR&a%;.I^$'pa/F7D]d6,Th/fn<31.YV5:nKs]ak20!!W*T_]`[L2pZU.ZRE1:jDGX,q5Y\#?AEo!e8##iI%39=(C(/Zi($RR/e7^.QZ@%b#N7Y)0KL2-3bH35U!>(`kCTmV4cQo*mQCmC=j2CFqscTA>/m\$KZnS-^BWJ:[LCOU<'$Pec"?fe`cb=DIU$\a!Q(GnY]PV?G6?t%qq'`\HueiN`LAeF5<W9ReCjrrY_gpZRP(`d3;lBt,^WCh_aVlVfS=m>)uPms?iOJ73dLV=:B(%3eI6KQP<"R$MbD_qe#Q$ZB!s)7%<E"WI(5D/iq:_Ql9j+pHB7)+n11X+f,.a<N>&A&LNhn!d0Tk#Km+\a!cD:)g8:I8,ZKW]3\[<BM`up-Og=Lo$7[L[?!sLWj#Rf=)%7*<g1&hNK'(+$4jAICiaW:kb?K!E,S&7bkK(YqQs$as4p^5a%bHptu6[RU]b(2nQVe1[XCQO*f-%XOu<5/@Xuq+N,>d%a2T9m[ip%U@BQi`]hJO6Epu(jF@@i^h*`FRr!!X,7=X+hFq+tC@)h7?hlsQ)9?2S][gZ;Y^D1YmlbOpk5`A]_!b_G:1,`;1F.Q"[NMY>L6^\;%Q1(P][5JC#b/uMu^IMs1R"f]=C=])F7!Ycq<,hSmE!#j,9*otkh/6>S!"/nu#o8Jn#j83anE"j6?Ga=-`S(0C>$>"J7E\]Mdk8/N%,>fKo'Si!cIYU='CT-P4CtW@Le]07/M,hV)-AWrIb0Z:(`b08'\#dIPRn6`BRWPK9:&#_U#:Q,[\e/#d]`P(G5t__Sr@obMFb#]$%4Y+!Xo]7d#`0Smd)/@,e7@7(@5H7@G#T^okH__>c?`*pY.rC/hm2"ShM-MSRRSZ^GapSta<Wi;D0"N0FkZ3qU?Pb(UFN`A@HVc\E%)R@DVh[\=E&`/*Tpt[81EO'"?#?gqt$:)XM6B24%IJH(<]LK?GO>X>QaE`Fj6,F68CD8)Qd'0#iD<oN=>94b.M>.-W$UoZj?jFk'%YX'q0cIl;uJ4@PNAaG?iJ1;RN5N'Th;-,t-CjrT2AO]MAE+"5ZU?UO%Q(/q#1ZC'fOd;NI2?Je&2QX]Yr%qG?6t//-A*i>1_luR#%Lm=b_6Ok:]7/4cefkp:.>&5GU)l#KbY)ib2.e.>KZVRtqi`qEZQJ_qJXb.bJ;*e=M"SE3^k5_rh!k.)H\$"RN))51rZ63sr1)?r`%AX>C"_68QbDHf:ei#p\E2H]++eHc4Je?[(bd#u(q.IdG:i<k"-E#"X`6nm+g2l5)fN4h&=+Sl)*>qBq>KA.[b92uphda6YmPTI5X%J??,H2d(;?rfpo86)N"CPOCEk!"K>gRDF@bUG=eJlX/"&EqA^aaU+Gs*+tA(O+rIm1Fl1!M[$-5.75Ho8YN_60I5>Z&c>>\U[+]W%W9[+i/X\.()]A[-.0NXj48s*$rT`]c)T"K+#SU;Mb)5h9_:q3pZK<+7Sr@J,=jSd!k6?I*Vr';Bhc,1Hi!JUmX#?AX9gp\9LAHij%oV;ql9]_^3?U&;gM?hn@:l0:PM\'O)P64i'3hL99W07aoDcI)uD&e#ZJu[S:E0)Aedk-r,)X9,2r(;W`-o<n26q0Gj<cQ[rF2h?6%]-fsARaVl*-5,j7OqMMbB6iNla)\V]a&!+<?kBgAD<YCHg%6T*EBYY'(IBgl4I*CE7Ts1*#=I=?%*Lne&,D6g53!4r8lSmd(1<uZ%P&t9W6>t6(H:drkPtoUPo1-l$^_"=q+>V-#TNqhD6fF&b4?iEM&Xua5&Yqm5+oF]gPDrV2Qk@ai@u5Bg(CF2NdZBT%=SN3C+>g(Q%\[U\!%%qQf6l&a&&8_u5XS.2X<RC'K.+KZ2g+_'>Wrm4AF!*UhL^D9gCEL?DRM`Wib`unp,C1=T0X+9:fGoU@jnfm6-V4"$6U57g%-Y/4aGqu)%A.#04PLkW==hu3LQHe&sJReqVI\fF^IC'F_\o=o+dNbp0Ri%pH?l'57Zr9mfbs9&c\c?Ls_IUHiU"jbMHifM(ZjgoR%KRKg#AT/j@g9?F0L$onrkh-Z@65*2<ZJFIi)N::\OOqhap2Vnh<aUKIp.d1[pH-NZqU"[kMGUEiGM+FdAqNX"^f6hcU$Cl$oZBM5%-FCc[)Z3PVE>ShdU-kt!HV\8aJ"2B)d<_CF"HD:%foX^n*E;_anD=NNAM`W9iHWr&>r^>1X'iq:KNY;_YOgkA;<SlY8O/ba^2U(_%[D/[h1:o5sclT0+;dFVR56Y=Aj,XbbYe9Hh+m'0QrhrS]Z$2Yj)X01N+AE[cG*?_S4iYi]o]()X'r@:*X(htk'Z"l9'W'f&b)>X\%`l;P\m1@9I:ok#le'00\ErHal%k"(IL>Uld79?<[GD=I>m*s`Wn-37pN/phO$Pp5bPQes@#YP>S\u8tiUeQS<<8:mW"5RHK5]_Qu%;E>mseLcr2gG>kA5tf!ZP"]PN[u,:`FajAl)7!aj0#jsgVFGD6D^UHrM&lm0-A;m/%bl&IFTEs3oHl997MS[8TNN!1e`$)9#a1aa%@'U6R\PnDR=@hk[2Q@Z#=*jQdh5J@cRgOMIRfA)/Pu0I\TrN-@W^=h1QDl>=/fKK0=K9MT8C'T8KW<0$M5a`hmnm'pA6,YhW[_(D%V1T*`<=UiCL%;CH>er02oa%KG-e'/Z3e=:N9S;9=VO"22-Tbdi@-7eK#fYP_1mA4\kXK:O^8f<^VocWO.i;n2(_*o8c4-^mkQ6^g%el1ZGfNhMO.K$YC>r1t8BQ>m!ZC0LASdt*U)1@?V78SgZ,AfeBJZ>ioCNSW,C9#C,ZfG5%\/.O`:Ma!sE8JJe$I-jQ)8]cjaD)`K%e;/`&kW,]$*8[,Xn4t!W?l<+hjLhM6iUg#r0i4"]V/#T><TLBS<I=+<E)G`-2b,n[9^LQo"VRH31"l,ta2+:9^tpj>3;ma3K<P[4%j"e1VqM[1@Tf^s'<>c>>3(OIWphNiiK<J"kC82sXUU2(]Obt--O1,$q)i9mEXWomQX>-rQ@&mRRUICY&!Ob\.EgW1nH!q_@T8V1h%]o&o[qA^6I`cED5/S%O76*XlqQso.,ck,7,Y`_7LcuZ1b!gg`TX)-,#84>ZNi&uY<9SG)bQ@V7?j=R\Dnr%n?@mHFh:g.feE\Gu8%ZRVE>p,P189+c/g'nTiC3!sJ[F]@!IKck1Oll0A1'kJuX!BDcR;*dL.^1,ejdeISc&?G.15p9&MZCP%>!tKA)K>n]%\fm@FZ>hn0%d.Y8>pjhXa^5E=eB2F'kC9(n>3+=%?RSl2@mZ2p,%PV@^L9e^9;F)j6mP108s1opZg5GY6P?Lqo-#3^I(afl(:9[TTpVV]Ub9["g%1;/dV:5JkP9H4XKd%[=i>*?,\aqk0jG,3X)NARarBVUb^Li-'Y:b>?Z?!*Ad1A!ut$)Z4'5V[2bPmHBt:gpUo]RpM[_tme+ld_7]%==><"`iLX`KIR'7!=/fXNln;O>)-feAFjtXlM"si>h8AJD8<Unnl-W6Ms>5CV,pAJ_D$O!OI;bb6DoR]ZSg?d2GcUD$2.>W9Y6DT%26,L[dk2c<Q@]Vu_o7/l_pNfJUm/H1jWH$=ahic?5+/+YN=$&*e-Pj!/LX7nVGVB6d(7pp)4XRP->0t\d>M<M]JI-dNSe$U^gqJQ%)q2QR.:opd*15$J8r)fi9k8:0:*X@;ROXlJVT?JSFZLDILmue73WtNj#V;k%<Me&id-3#JJf:O^-Tk//mQ+W2?G%b1d\`tA?s6hD%'FS0JCEPR""C83HY_2,sH6#+FK5."CFY-NC=S4^h,>)(*HC]-iGHD@H7mY'ZX$[7\N@T,W?E?"ZXf`C@&CNkFCCp,-S6B361o7]_%LCcm5(V69#2OQUol?2S(eMbr=]LJ4PT[kt6pg(";YVC$(Wc^S#ORb]>'3N0>n#k7C7oQCNQ^"bOK2U;XTHd46Y/.Qqimd6)'q&lG%Y15Drqin!Z-R@A[Lf:@,b853;Wn#WcaksM;$3jW(eEWQY<ilkWfo`RUFWe;d_URl?>n3le<[Zs4A@5[A'8"P!7cml["g`97R8sP0%#f)\9$6qZ9^FF@@MK7L;B,qg?;qnJ*<@E,E:TY,c%`;X@XU_UA3a^A$Ug"E=o%lfg,*3==*W1P$=6abY[M#H8LZ>],Uo?slh)Ko5%kn'p>,WU!.oU+(,dU@HmoF@,r#hr64Pn#MQe[/7Vkn)%b_(SKYX5M,Hgg'Cnk>-T-8+Y2J^]*MBYJ9ntC&XHhR#q,sZbpA`og*e]%Hoq9<:ZgBc>Q8R]WXnXhM?T.Z^r:MD2jlT2L7n_G7u59r<Pu%pqB7<WKsFGF$_I:GIRL]e*"a)K?u6#_qmJ)i3+-S+3Fd!$hq"Dc%J;4q$?u70%cI.Js3t-:;o\k>.&NKXD6GFOqfe4]=J@1MYS`>ADi/Koc<I]0IDs&d"",HXBGQ7U;p[_^UnC,j0F!q"fpYVUW4,'09%hjk6fGFdr^j?=/aKjpWe;6\7\W!Y$h`Z[TS#rI?s6bS7V=8RDgH7-Vb34tlUOD5o_\i59$jKB@S9TB4'37(H\f5.fm8CKi!meUfu%;:V^h5!>UoG-+ur/s5c1Ki,A2csF2u!tco>*9k>-%eCC3eFdL#3aKOf?7.QA\k]<mY^/;VlZKhrWsCj"`rq?/5<1.>X`47l,)Z!n%^IL>./*CJ@O5A?*=DPBO"JVhcLaK_H>64.$5lrg&KiK2jNGd30U@urP1XsG,W0O\%k;Qh<DLA+X,A+EcA.U'tno,SETGAb1*KY-h%Kt4u"`ek$GI@ofs6is0nQq>A>-?W\$A)#=G*T1GSVB[?Tc+)IaD%K[Hm1331D.Zl',&.aZ08G&kfqrbkm0)TI'*7i5V7`PTfs5a_%W)5'!QKhsV(UeL[#,AMb=(lYcCYRJWF&P<RhNhir'>1gACVM>TI:h\CDhb^&k^lHI0a;KQ0Id1BJZY,4.[^t,Q_LYHBcp@91bI//%9L9]R'd?1,#W2qt%X`iboBFjSS;tZa$Gn0Cn4DRpE\OXXkfB7U%K^;'%KbA7p*"9'")SNI3HriJIiY-Tl!K/-IJR%(H(Y(YGi#?J%-(]<cZ"(P_@^5ce.G`MT69pKT(O9f`p-UA((Lj55rcM?-Vl,#-NLR][l-7!CS,AV1,U1,G"Hku@:>$,/b+C;]?qdf$Of.S%8uHrJ%#JW<M_m#ek=)/o0Th?2d;LX']!,&N44Y4%?1gLt+>i2b%O9VBJ&)_Coekf36`0gWX;q_FXFn3f?7c(g=FD1U_Ea_%gUk]?\+1J2[%M=bYpCt2:45]a-sgt5$(6!JE>#]R"E^h7^A'J=8lBH1EWbO7\SNHD9P\B$4W8_H%sOer:U4MX`A0,$H8\,Y5sG)M4u$uG5g=#'EZ%E80hVS!Brs=qM6a==rF9$q_,_:!52?<q\q3Jf^:i5-q[98>KWnIbAWWU2=ZNE.qSG(YCr+\BtN$N_;'\$u<-gp`.2MasOS?-^q+K%qiITJo+Rf$k'4TLSi/d9i>!=K,3#c=$:EIT(J4d0-u*do3T8)K_7;%/C^a9fCPWq#1mX54an<n8HO:<2EF0`:;bmN4<i3)u,>(S?%#TJhp9eE<k?AHn'cg9.[,D[m)9^%JWJ7bB6H)Me[,c=C)R^,dJ#a=mcJ2!X[*o)?n_!+_gb4mOj]dDCMMD,+h[WS(/:mm&9E+&7*%S#\LnktsIP7?Io[IKRtP$CWCFO=^FZ#+u$PE7[gdU;V?O;r41#3Go(S]e4jcYs"_>i4^;&ZVq>-C&-o\IKsTmA#$%"cuoOIoL#ei%E#laqm%`B`?)Db$JEPC2)IbII!]E)eerH.pp!e#dD;qKgYt!gVAfeSIdgCf<%a0"Y'#Ifq"5@2O5fZOH+Qp0"5WD]Ea'NuJ@/p[[%+7%eL3iNo$E6JSP%!ii.5p,r6AB@5B"*<pGCm^):)B*o)7QJhLq*1L3i';SffIJ/.2Q&q^JAE3_)=_9nVO/uK[WK(\f)[G\IBZAJ%bHrlVi0XQBe.W>>N[)i5F279*TnKD)=CE/%RNkZ((ui<%:Id+U<3pf,SOQ(4*oCnOB4J#'ET8Wf/%m"E??b=9"?UiGmG@.mX\/dV%@c5d:jUr^Nn>9"*+?N$.Rk66pGfXEEFk`q@<mO5K/4Z1sER?]8i'!UMR_\<'\^?^44`.nP2bP$E)Je-'aii1d&]uFJcOCh.d'=-R%,86]/-*(ZG^efb6_Y3266_ic=lMQ4#n*CIf3?W8QZKYQqO/rDPK.6%a:'6',E+p>D>t=mA\qGf3R=4N<DDJ_L%KgYm4(r^U*8=Mo%\]8#Xi')Z3\r:cT]$BRE#)m:dB6^s>O1MT%-*(=\T7\S11da>E9A:ahUlhqPE*9sg\W^733V3Y!"`Cfe#TW'<$),@s[Mn*=/pa)(%FTa4>NcsZ0T@Xetm)U%M9iGpeOJ:a?SC6R1VYnnf*$b'LDs7<?R:>]63eBd%/@r%:?A7J!,sRF*J<Os+AQ)<CN/(/0i%fft49rK?%3bNR="%3To2:U)$(K1##>6B(`[X`)7as.kG;eC+Xh#)\)_=ZJ(4%5a"_u0Id4e(+L;[$B/#)8]iHJDqaQ`o=-d(Rb:8h[(1Gf`m`%6F9J04'oLU9&O.m#lq%m79a^nGfA<$.,FNBbsHH`QjAs.7*f[&i.t"bZe+K\"doE:G]la/V#8Y4Eer"?SK/l\@-@`nI\EN/#[60X%<C<=!!pUN`q_]cl-X1h-?,6M;ZRYpcI\Q!%7=g)/&bN:7KauqJ7kf$TUf=ue4d!.]:-Ym0]VYqK2.K0RFU?u6$>W-iK!HI!%ObAM%qq3Xf#f)QW>)-U+6g@(CeopMV17!\\U1T%QI.+GC(/,iHh8'OIT[^uc'4.G\$"O/kV1H_LhXHbPcktes1bu)4'Ho?L:OsEjFZ*)o%%DebW%UUlr<G/B72,KbdR>smJ73g4hWq'3k$_S+>+>,PrcqW<rAdB%MMOlY@!/!juCl;O($?\HG_Eac-2HtodZ`9Vt:Slg?.MTB`%Kbmqifla!U.`$")mu3apo:'EOTA-l=+i_<^5R2XQ%.3#d$6g[9!gun_T?t6U7;GMj,1KAQdJs["9]$V]^B;T'$c>f$D8D7=!B%iL%5UoZVIt:&fCoi-8Ua!25S^\"j.gbL:6?Stj,>EC?foC6]FN%7=f.@;Hohj&I/O?#7:p%0,1dh>@0jIsb`jN<-<0@h*idOU8;%#JM%AQkJ$"tc$DMCAaceK*4?,N'!/WnaDoZQ71`)3!q@YdU2p.]a:_r!-\J'0!Nm_"lG+8V&<8PD>Z8j$L9_Wu9B\$[j^oKi4iGUI8_r%V&&7U)M^^u&`$b7Oc2>0I(V/t8"j\!j5VtlTc]B*4,/tfF9\21F*o#k/9GY8F+A>E8-';\h4i?C(+eL"c@OVIU0!gYU_uBj-5^u,%?+.096G=qWZonAVc)X.CfZ1t+`-HOc!VVqP0H+7B?mL#`96Ak<s3/FmSn9_s;abVQ-f_$OV3$VCh.FESQ5ft&_&uR,r/HFZHYabN%ALhZ8qo4.7N[pNrJBB1gNMiJK=9[5-L1VI9q+rYTLm'_9=JG0=#kSk\^j$UdEC#,W=Q2=]##W]HW&/Pu`_W/MW2oHolLehA1lGTu%dqAs6'0^I^53:#hB;A9&.;4RLA`^2V9ac(t)3k+:JSm8#Z(>g-++2Jq(N$69\Y;Q2g0A4R3d$+s!*eHZ6!.2_7J5SqQf?J2e`<@J%0Mh)Eg:K72B@=mOi^p,((f5WZ8d)Z$?oIntA5hKGXB0req4a]nqUFMh_)0<kg1KWuR@9c:OVS\DaEAmp1&4a:VuRJb>?V0$K$A!9%O0/\q.Sp5rfN.jC.208c#QS)b%Oa;h"2UHr)aKr4*7CA+Al>-Cbl,R3%8]*F/Jp'u2J8--G)MI:e.i:G7gk?]a@0%`Ha4a03BL55%1Y)T!R7`u,QAI0agEL&QoDS/7Dd79ToC+r=*l&-VNJE]_;2Z97\=@/8"MCd_CpjT1M:9c:ptcq,+$$AuD<o)NRbU_FBW0:[:Tq9?%^lDr;qlC*(asC!u[DR_'d_M5.8cWH7$%>Q7-HKeIT11Ohs']hCl1_3*bRUN=>n_NY.S97WW\1(P[G/bs^BcOQ1q/4/#nXYVVH<NU%Q?USqf3h$>[VdumI.2)BeM&:`@l1kjAT[rdH>p#c1o1m;P3Zf#,[1k+"+e$X.0EeH=N=f>2$3o=a\T0\9&Q"Mi7@h.Wn.U%(?pk_%g?FsfLN0l]O0gU[h)<Lm3!,aMdll4uF/iNU#hQ)KeU`"KQVHMia^;&!T<%-G*O@l,'"kZtbZ$!qdX<LD498i%;AOI>c;9"!@akZ?%10Y`OpmJb5!i4MXYa>P&Fu186WQKd,qsM=/g`pHE9r:<le"@.HEsIV!GtbgZ^qlNpD;WTW>W0L'VSXb]f*!Rl!B!Q9QE'"6di^.j%M'HETI!Eo+g=iOk%6cK[k)_3cm:FA$hqYU@I=uGn1D9=nZh"eH:Zf*cMkZ$9XdWs"fnEjsJcKPiJ^Z^#R/;q!W9V_!k+m_?e22[f%pN)g.Xh*pUZs;f5Kfbp-UEt>%s6>F+XmY'1h7'1[QdG7trCI:.p?Y\te:3(6U`T6l%?'Y9dlN(@I;JpRO1diUMDdQCODs5FjAl8D%7a\9/`'B;R1FZ-,4H(&tE&c`>1W@YX/<k[-?VI!K#6o8Z67Y&Mg-Fs-Rq>%8_k8>jd]BUJaBC8-5/!UM#&>_^*P2?MTQg@EfIBP,%.!S@QQ&,q7;3+oj7nF;hQs/oV2p6<6O59V4ka^O]T:(:+hm%bN.nWQO-bP('2N>FG<"7S_ZD3nkP&&dS%b(1'PAbTM1EiC"Ks:#;%b5;7/CI"'ar7LEd9tmEG&<n]TK&2GhX"_o?**"G0Slqp;8Z%Wc2'9Ji4\u.#86di1FV$UgS->piq>"R(eRkjRkl:nuM,G$eB*t-K%hLW3A18[3$"EGDK12kA-"F5ue`#"C1o7LQP0+n:!s0;YZ"lB6`P1cl<38iSor?D7&)Xpr*MoFjk1K33s<e\>a%k::B96]%bRcCb6%SoH#]QY^FgcU"4DRa(&+m</Oa*,TKGi\#bhf,)>9LdtDp<O<;CeKs&n&E$PR?Fd2/$n)OMl#Eq"KZ`2!Li2]ir@-:rgu,I?+XVn"%D>4UDXA!$;Yh;U@^6#D5om%[fNWP6"+gkauC=K>[Kjj#8q9$Y*BOO;L"QsG4Jfp=H4VFnYZTTTNBfDD$c*R*&FZ,8?F:DMj`36V'%/9i]e-k`RYPg,sX`0+1K(0^KhB$9o4J>H6MjUQ*C4'ahm_Zj"r(JUBg<MC?YY)V"Ed@)QcSV_b2q[+f1-N2(*#PU&gWm1dTn5s\/%<[UhM-L84X=kTqB-jSBs-nD[t.2%Y4BTmLD:;FuI3!Dg1mFo[8*&UYSHf^Q'4"L^LMcZd"BF,d'OFok0oU0,STo.Q*hra_$IcuC_%l=R2KP]n[<p?V[",#@jdNRlUP7e"Fi/CGgH.[sWkQ%63_f.UIm[#,\*4cZ5:Jm7W;.#&.)m!n,,c>?D;>?8MF@Ymib.tF&K4.8ao%Aco^:\t.P+WX1gU++7p4Mku6.2):UPCiBK<\VZOPMOASY)A8q_o2C2mL>ej^:S&7WdL4]Yef7q/&@GTY?s9Vnp_pD75_eq4[qRtZ%p`nhGeV"]dr#.mg"kd_Kg^oUIA']n[hTS_R2leM)(>S]JcCO4_"*)+OpM?"p<]O&sgl_o$R,\XeAJk#L0WS`Z@J"j9TP@m-B_Zid%lkIR8*EeK?-3p9d^U-Ckfm_<nEf!/.nb05JPk!Q<45.o-lM(K,L1J:!=+<HY#W0i*TsV<OUMMsmljesK.;%lTOl7PQg9<,]O=!U=%F]pkgik?LU]1WkBV<3Umlp(s(%B9S!ns%=a^l&lR_4B^ElVms>opg0+<7YC:R9Y'o6O&LUDq*/p/bQU<7[jmKi`mL8APgG+g!2nn%gXU`>b*AW";s\W7cX?uYQllsXCcGqq81\eijCgjFXN&:S&4C'_+[l<?FfV$aN32+OCRhIICs@oK+ifq)TE;$1'N;_Z>F6%<]k.dB%dW:r]QkM_!&J&^e2FY)#Ba-AGgJ`(ieALX1EYT*$nj&Jar!M32ajb\a`iK%+q*N+#_3/s;0fa3"aS_J/\)\t8^`9kNrDL:WOTbub%,t"%3#U1hNNpEp[!@2SWk?U/D<gE1TZO"q@_s:aUh,6"DY!pTLl.=pli'\k0f!/n^'rVpXf&Veo(heqQ>L*^9I@2=#52a?m&KF_Q%%:f\WW7H(mc'fWLeJCKLA/po#FCN[\=oSj=&8ErH:b(2e9dS$VQLRo9m"hZE,@/sW:iH\;Y==Pobe:PhPNRuP$XMi>,[3ODA>4cW%d9-N\Ms7#cI7OJ7b8%P2^@BDZn('k>.T9R(EK+S:YRoG;F7=W3EPm55CNU1IKb<dP#"\P6>HYkPD;ik.1U$!'R^nku8%R8d9&>>+%=g4!!]97UU_]KogQ$#;(aE:DODZ>3pnLg1,R)AM?[a)q@pquiZp\SDHDgsSOq=H=WIS'?*fO"\Y%'p]L1'I^[7k-S=o[Ns\i&/?"%H$/?1"5pj'59c2@,X9sNd@u$lr$+29bZEGBOZHQmDn;FYD&2u,hAY$PT2qKW'9,dB='W2.V;ImNc:go89q0]2m10$MUp*At[2)l<%bcBDV9EQ_;D#3"Q9f`ATnoQ8!Qr>ag2"5mBI1gHLb4>_AS$F$n7uaf^\#&;ZXAnuh^@MdI6DV0g-?[=sR0K=$[nPV0C*$Anc(6e,%8n:?>SGV/fZh4^'=0#9/$."I*0K./s])\mf-$RWH":H=4#bl)f."5,I#-#/#)]4G']r;.#h$MDWY']dd*EW[^QBbP%bmZmu78U")%$h'GM+CmZiD9Be=!s_O3Y-r<=/^iU^`BBo)lBL%T>YX+M@]epU[>f':L3!kteFt;iDXId1ooec!155Tec_c]p<E:qAJ9>7*L&g\+%JTpJGD.`F:<(:&*gR<P$0H&;lLFl;&\Lnej:GuWPk4D#+>'A>rbAc5*?*SCVDbN)Ko:$LjYHD'Ti.2p1,Pq51C4O9r^XspkIs_?D%1sKKBSP@X<Z]dcHTXI&Kr$prYC7F'<MdsgAnI:G=*oe3q\&FY5U3YFGD'G&-[dB&fbful6Y)rOYVlM?@eeWC8CYO^SYOi;'LEg$A%H+Z!FpYk[WS`GJ@<(>%j$!l]tT""#_q8SLYj2",2G[[@em-@#SSZ;A*s/qL-?iFT<5PScsP,WVtKJr.W0X]W.Y?!(2"Z93NeY.m3%J<rIngg9bFOl6\C61Iptd9%NIb?3Rc2pC3Qb@jX]9aG/%!HNKue9e&];9^7o%g;X:Z-#Tf!_o#9Q,LfNCrO;W0S$ih_T3hqOK1n4%D%m13lYgjbV*C$oGCR=]/rfSXAH'g48\`E(/<W+t81#`u9/GnQmEs$r0M-mTJ7KN9ZuIet<8D4Y=P=E1Zc>O\-Lp0D>,J_Ibju+`%qKuQ]S[>%3JZ1Ktj+Y'iWg6)96bL2uFYb,WW7?G>VFf+<Kj,D<B*db'2WN+eA(,)+ADX6gKD16.c-5$ZcS-l3foqLhfG?n\RTq*0%h+p]_ZMGG?M=?pIdmtDYd;FONh"FTh\cq9ON5.9fF='Z.0s"qLS("L[&/Hn@<PkSRr$@>0h$dB*b],N2/k!O00p>q&"n1F&`H51p%kWHg%,Gdj&Zt4h0f=b8"DcG*BoB$aA%6I62g]^_XJJ\55(@-r\jIS>YnZoX%CErEoBIu12ZYf<O<iqo$K8dFin/=;\I0lU?@F*V<%8-`Tub`[`@pCRk5IYG,!eE5FO$k#t:h3517:>Mb$J_;eD+g)l%Ftqla-Fsgp;N7GN9h=/7+_7crJJ3@8a^41aA*gV"d(WV7cVGWf%Y:JpbAWW.M1'7UiNLYlQMNA1BYrW/2Y1[k)9h7bG=:CcqGqfCGNGGH/bI>1`(j/<fg=)]X1UK=CE1"`S$YXj5gh>enCNApkUfcCo%&BH4"lW.J(j#%hae9D3/eB'Gjn9'fQJf%'\H)8u[5aRT_bI<tF5c0S2FMuM;RqA.0m98b=,&<p6$4!)dq0@gu.qBC)"1)m]Yj]CD%R.S2`,oG"Bd"_eB_9?<7FL]CTR$U7BJl?3@juH">kFULE<XJF/p[d>F?Uj&uI[Qls)DP]MYJ@a_Xq'c-N268_2(\lVhn=DD%:YGt%eCgZ!FiY$>957#=ADGniQ3K1XYoEpV_S_u3X(?^IEtXZASM?Re0<8uR^DPVVLjgc&#M]W]F8kr.Y',8B(`sT8?';ekg(4=FF*V'r%=UNu;8=Ku[39riB-5.34$pr1(16C_lqon5"]1i<GGd"9rm$47'^VP!\!/tH],028m/ArVR:D>t"8DGt!4&HkQA35.%aTf<eMg<n'%dd!619l[)Zr!YOKe\_^P=./=;f3fDU:X>n,3HhE;cD./r"1uJ=V9J!t]0BJ2dQ<,(Y^3hkAL<K1["QXfs,c!JapGj1p]61V873P$%:M6u):U[0*HPG9>QX.a.>_)iBi#cCV1PZ!iC6((EX0Af-p911s.BuCKYmrrEn)(VS$]aoR6[OSeC6iBgFM+5J`&!1_0h;!P%JI,9%&`abE;"8A6a@se0e<Wg`S'W`51X14n0CV8l^>Ssn%,>HXP=HGid1"Mpd5?j86Bu*i&.%p9E*UM.*9LhXE"r,rHs*+M%dO;0S@rgY%0=XRT@IELC301PH%o2pME^##pX%:"63`jUZ%s#m\m+#Ua/VPfQ$^\llC^0MG^^g_e=+u_HLb$LtF8kd>bbYl6eZbWE[Z.]JU3t$'%JJ?Bdb]g6odjm?oR+n?;65EsoEPf!I>2eoG/hFEmH"ofiHI51T/?QjHEP:([1!P#Q@^i:N/YmKsiEG`#mOg[CUH/d(f3Za\e>[d:%8"9j0.h5mY!$e`3!E=uXh:#b9.i*LTm)MHW(NA32>g,I0BK#F^Lco*PL2#+n1P4>t]bQop+kSI25`lKh%Fq=lZ[IC-0:;KS's=[j%#M)obGMW3"UQW!l1fgmN!PN+.F0dQgI3VLE=,1[m<f+[%j&bL'0-7$]g5drNWRXOr,`B`&-$V5o3r%5+*.$b$+Kl9GHiUg$Z:?El%8V3^QCniqjG"\p*4\irt)&We4$n37!>P5FNkmW,h98*F)>4:,SiA0/&T#_iQ>J;r0k2Xm*<n)U#+RO"QeD*ppS"2-KSr&KU5rc1-%fNH.ORXjsP<q?c_Jng3o+^Q`NjNE8-%O6skZS7Hk@"YpXDu?<76&A@cgF[`dHgqK6(V3)^VYR:lV-pF%k<KLD6gSgX*eS*.bT$;=%.k?;W?;PIXS-D+-2O^'uZ-]7Vcg"e)*pUe'!t'bdmYuc\NdTSsBgmb0&=A@<[TKr4D&!8KcHK/dg%ZK816(5qVO@`dG+*.[X*U2.%T4+VnTMU2@lqG&+:H]lKl4^Oa\Qg%1YP7BC'l!Z8Y4`nI$fYVQK5PmgqPGuuUtbG9`ka6P+"e#N'<!Uc9j-jaA-.#]_W=hfOCRM,%R\-dGA!EPVk)=,OWahEM(gECB#I''B!$^!U^b&@?h"51/a/O6=(O*_1B.;<o[O&JugrdspGPIY1HqZ?a<M!&Lq-*rb\H9Ehp->n0%?]]jTr\-JbH1cnqI+;)0,1.9ZI,m19$L.?t1b*Hh<ik.@Wg+@,3gjV>la7qjn)f)Q'c>s>1=9oG"X[S3F_mslAMGb(:`[+u:MJDQ%:DiNG-ulAWd(Co![[XaKo3'ij_Rld:!>q71PQmE_70fg[*H9+#p(U=')*!FhlA;X!?HUjIY$a(`8V:2h@TG?hKiqH<&-]H-'lo9'%<8OA3,oh=$AmV5uO.`d@F]?]8+EddG!XB)OIR;M^C7&G^]c3iXAq-62]oc^.<<KY$SKk.\Thp&f_%3ZR8#NKEJ?trHqk*9Gd$+:.%PYYK;QlTkVf.ZC@.paMp>?:u>$[!Aj'*SQIHb-$4Brpa7#.?'^80a?cT66E`-5E'*,]ClT6Gg)G3;52-!%R_P#9.SLAe8uT^,-lG%53)@EMH1]<":jF1kCM76ktE#SAG$EJPP;3=<H=D$Kh`DEb5qIZTcmX&SWYPI"aS_$D_`0i9452#."cfQhJMLg\0aZ)("OKQ58S*W%$i@o[4C;I!2m\%1"nEko"DYn,Xm%XmbB+04]E?fiZWU<iD_b=#F&?Dj0J;Q`V>;OHl2c]&G;RSJ',7VeIAuLD]6lj7!?<(0,a^E>%+^##3g4$_fNG1Fmo".]712D!Z4bH+[iruXUZ'RXI]Z3Gi61c%UYYHa=WqMM5aZj+F-$/`A`nIa%Z>74*dJp6!hE373Uh]tZ<p'"e%[Gbk<EMJl>[V^;%qnHCRkNbe,CHe"5;2^\QGh#X^O21Dr-(dH."kAm]"T%C_7Ol!+ebq,:Ml+D98"tPRH>APG^%@s%>je"[#OiZ7%B<#,i0WrdB2;FI.U#*JN!3<7RSGYQ%A]U034ksV<B39CmZ[O\<Do$:FbG]W&CHeI1.mJquJ<Dh^%C^%G/ke"nBt56qQ3U;u1Tfc5%E*)]\PYq-rO2h)H5csl-J<k7Y..:DHf]VSdm=\kKe18BnF*EoO2()=pjX.Uqe#g&i^"RB>A!,`TH%+!GkSo0J=UAa3Pi+;Qppg-E%1ub-Mr&3,>EEV&u9b=L?@Kp;Md]epG-M'XZ$B,PZZ'jBb&XLA74AV-[kQN/b/ca[-?C$+l,P6s]Xn6&/*#\n`1\N$$`]GacfZW]M%Yc@snohGhDCIr;f<q6U3(X)K!I2-UEg[:EIZ*LkLN,n8knk[cFR*;m:o^:(%R'th`hH^V>9N,5hAahNbj:b0cX(E-+@g@/^Whabq%o,VsZ"V5pL!G(3a(2![^J5"JGm,I0\!R3POAS240f"H;kiX1DN5V!m)9Rh3NWc,tp4/G08p=ku4C72t-<Mo!cQT4K7CkB>Yb$_Lq%Hen!X(/*ONRTeoUWIH0H<nmHZ6#1gJk3sSYn1K%OlG,JK'W?oKfp$5'"A,gF"pS*BZUh[q-$V!B#YAE1-W7du?(#F:0]5WMFp/S`%b1Z@6g=UKCor'&Lm<PO/4%[V1RbbUB\Z34..kn&"e`M]LOVN-uYXPrg2VcNG;gI;mmJ4O+LD`Of=JfS@p9HhgLA@T$<Qu?,JlMYG%(Z-#5F2q.I+g?9PpO%99r9\4u_ZMVIVjcD+E3TL>IVs&@;2qJuG%`Zd?'Tpd"4JbGU8/:d(ODc"[?tf.BRs9,ibl9beWE+t,(O"W%"s)(IL%riZ)O\g0*;!j;lBN!.Y@d.c9:ZdQKE,a]ctDt-p])M=RFsdRCc.d7<di#4pD>;;Im..j^+lRQpjq"0/uCpUOoi6qc.6&Q%S#Ms,enR^3*_W<a=Nf20@<AjOQs]IH_E;140B]Ts<P4Sa5YTg'nT^jF@[0&5Uid;P@Gtq<XiW[ol[PJMSO/e`$XM#:A:[T]]INfE%j7O$WTO>UM]kJP9C>'`+Q<A*U'j!Qf3dQsfhL+29dJu^ifc\sd3)D2p!]VePU2>\[4L(E6"o"uGL5VY*:.4daiM9I`=@,3rnqA\l%BKf(1-4?TTjlE0JD9^&RRMS/ULh4+;eUin;Am0@UGr&[T\5DY9Up7s\gK=tCh[</I"RMG7i^OOQWZ00@EG_oW;Q!0gGs[Kn%nu5'%*gEFb?^_p\2Qqd<9jH'UHLOnBkUDZ5Nm=ql@92OJ\dJ^-Q+7>8n?huuFPbqKs)s9kPdG_iV1jHIal568D-k:";4fCFN%f4_`<f,o%FLpX\phP$j*U28"$F,6.8TSm6CrNLWH'Ye`nA%H$8#)pCfrPL/#ubhbJ7`gu-:"Em&8,-#o%=/(A=3L/U/Ni#jm(W)aqonc4T+Ou%<)&J^_HI!F-=m6p'o43soGr:<$_4?AZeH:9+I6WU/-q5p<X>JNmKk+]qVbVB?sB[XmM/Wu:^,q5.*LmnKR?E3Ka.'F=@<(0R)kS9%ZNLcgI//0K*Og>?#G./MTP7P4JTE?-AO!O$Q&:?p0'Lip7prS)E%ND"-#OaRZ_>@D07r$59;'<P0,Sqb5d-f>F!+]VV^fQijEbul%e"$prE,0_MAcOLhB==\WGRin`A:&WJorL8o[>p>sOXq-U01EUdQbV)Y]8X!'ZO@OuC9F3rAYKW]*-I4:V%:?]E0*HCK/[DMoBoUg%[HapZTUfd6D?HZc8Gc,$\!Mg/]WU2^GtHNTXS%5bBV*9+)+fr&*1npB`_%`#oi;UHY]l`Z5&"TABU`,34f7$p-6+[!Ydjf?%g\Rn%9WSjnT^WH7<H,:`15!O'E&[&a5QH\%RXHs9gKcT#T+Pa&;r6aqUKPf<S79Fb_#\5'3DkPabc>\h@.l)>%n>X)$hANiDqtU^gWsDl%lIAJuG.cm+P?!KBd&=p,Xn$3".ha>SCCRl=Q[tQn(R[>L45Zif\CeN.%@!79K:tOd`[$k+IC:T8h`<LuQ9ZLV$D`2uAb*S.K3&OU%RgP'l%8*BRTI.DAXq:YhP<C+]fB4fq:"h#+E/U]8GrB6O[!=KtlE&<%L4m`t[c&Z$WCJIIQVC]jIOA.$^f%Xi[r(Mtns52!$h/35%qkgdGPr98NDd#BZlk1IZ0+0)X$Nk%sR['aF)n-,LdG_>r\@fnmBC@I7a(*ftNC@&1`efi?2jtV#A`d8sH`t8$LeNX+;],C;5[3o$%FVCXmXEObg>Q'>D.!V=&aXA3n5`5.MmZ\8?d;AK'AB,OM8_b1ApCVr$c^$_'h%CK8[CdNG@Th0Rr,Hd1Vcg5kcg2W(@.V0(9tJpM%c"L<&aY;e'3`X2UCI-q(05rnrs*;a7o_]`=dVs+C-oB7<FBUsB_eE7b0Z14\%*3e1[UaXB:138cKu#`eS'X,%!mPcIMs,bfjjGN7%Y9_K[bJZ+c0Hd/\O&0)iKqlcIn$/k06h6T6)f]rqC-C3VjPl#Q>u!jZ]PalL]u8gi'c'"n)CC6SCtZPP?PM=#TE.+-=tSbZd#52X%hn9;MEW;VbLX\T.Hh(kH^PcAM5UL.<2\[e,809A.?N@M1,Zc>)VGt-^Gd2G)=sE7O!!h8I]&dHYd]bZS/H+ikR[nLa%Rh(T?\/@D%c`N$4md*FkK*)6mV@Wn\B`P)$4p$$.<iAjWbJ*/=K85=>H%$D6/)uI%CXJ_=!1c'!/Wt0o?+!_5qrZg9dj=k_)A2J(.]04G(n.@%%<!/>7CR^YOn4mU=7IL72TOARhqRcY)2ff'$D!I3:[p"itgf?6&$4T,hi_.e2f'<r8_a`Oa2UK\f:`6bJf8?qKVPka3M)-e*M.<QS%_n>9&nX16p!kcUKVcbXf'H!9_X4id<c)^BJX(<3(!:\L3RMAX/R[`--[I('^/d(KIIn9AY6Vj`4rqkP!Cgedn#E,Rn`5;7L2m0C#%W8aN@Y/;Xa_0Tg=+0R%Wq-9p(cIhC*E*@q+6Fc_>9mAm#d%YD6-&?,Y!DHh@)--GUTofYBT;\[;JnSP-2*7NJj5OMn#(A>MU=+*n%@))V\1X6'.=#1k:UG5FY\Q:GCY=+q?*jkX-)%)VRqF76dhfOu33%7Ptc[O=K6Fb`i.0f7SSImsE5g4==KToM6r+qP-`ml1\+\#Pp%-kQ[=r)<PT=9OnfAILpC/nJ0&SH:[M^i)*^L`V/AC!S=khN--pBiXSmT+.I5@"7T.-WQ3]4,\/f9`i"k(?tg)UDBhBPoF+)V<oQ\%=_VlhmmgjfCLCE(]]MrQWPI.F02:CW)POMe![7uB[]fg3<o5F9WA.Pk\.368:GO%6D2V]ROt$@f7B3s`)oc!^']AYuA+CTIfH\Tu%CYe\G*E6mF-cEYV-i*>aC&QSDMJeuF'_geths>=u2M3_j4]]^6]o^"*fI5?ID(dk](AsW#LQc7*"UbdW]G&WnZ"g"=`,,j-i9KXa%JZPP0)XCJbSkmf%VD&!%*PdUHej7sSrc_O7'pqqh97&;Bs4Q%&p*``TYGSdR=r(V3_(mm,bm71sF>/baeQQpg'*B#>jnk.P26oN9%TGmgD2b$6ZB;i`:No2chl<1'uT[LG`>ou3krC2BVBdu(RjiD;FXTd#0nD;WMN.9fV6Vu5*[_nL4W0l@la&?7diVSNEIq^/Rg?h(X%Ua5H\T\0`-!Kg6:-qHYd+<>N/C@EX/NUa@a21uJ+KlXlhAG(1KNM9n'<o&\[#;$8(a0Q#]i,TIbXFct%f:lZK[811uM*&&442A`e%55"5%+`7FtOFgC4Lak]pg\@B-EQdFi.\>%Cg1N-l>^]4N7^@";I/8dkU^<(L`k&;&$oXQ+laGT[Z!T.fpVJD6G=W9Y[?P'j9KOqs%a`>/AX)?.elRZ4,G(ZX".]A2*O'Gn=gHk>GQ"X)m.goWOeNN*#\FceM6^IU7ecKk/=U&KQS[eNeaVk8nR@Qdc+uX;E'ROBDe5$qQ%C[UPKSdMnH?6UEoZ$(WZI]n969@(%Q9\O@ce2$6oOGV['=^<Ac""'8#`:O*;-ME\fk#aTdP+&s]lm]bP5!b9L:MC+LIoUX`W/6]9%aoOB%6nA:Db1,:G'aR&TP60PNB*-i5HgPhOO&_adP-RV4f#V?a2np=K^u0F<*5OW,]g.nfH,7X:Y(R/Z5r.1gn9_K05+`^KA'_Gr%G'+gU.ZZC9FQ3g2#3O<h"W=JYX1..G>7eRF2UX5([\9Yc,-_9rB1?TaThUs>[PD+&%O"[pqoj;C01DD9.a#_D>Hph6fQIF63#J^:%2juT<lnt*5'J0*2icSWh>bSjf<i*"OaN&1*^hnMUDW3(6QS\kG2.G_p7@EXt;:nl0i'N`!;VJc54j7;pZBs;%r/)jJW>pm>CZaie%%6-6MV=%39"g9NoPaXCh_h-$RmK/75a]'tM@u)>55gL(6-K,)"gu&0Qf*CltZT[bcO4itUj7CBMKr]XhfWrjjkQ>MKCOZ(Z_'PL!%WK)jqB">4Rs2G[Icb?G^0K8?LmgpFR[\=gH):l%*H+8Z:+nk8\_!Qb&'"a,/5i1P`Fd3p`%&aa@B4"lK^5uu8KE?u4Ceodi]V#>d%hmlos!Fr^POU#\J(1#QuN6GdLp.j"3).H/a>QJXE.=p51]Y(@I[/&QTDO6u/Kj^[:c*-q42.>j-mu>IQhcG']2TK3S,Xe\adqRR\%X0th*d!V0.Np3qr.QG9=2V[LU\Z'r<.L*We5T6$@_YoQJlFME.\h33Yh<MR'l7ZXk]=]cVcRS4\f(NoD$PbjI_U6li$%6rHJm;-R%r7.Krld3>#GA_SfD1Vd4]C<SZ/8W;bnjZLJm1F^s(Mr3m57$sX?=!$sQ.Dk(K1M<c\6mZj8SN'F:;]^FB"qleQm-R\Z?V,+3H2ul%1Rr].X3NaqI\D:$Md@ii>.0Fk"l7M&X5I'W@i'!c`O<NtOFJ8UB#*Y0ViP>%3p+92p?V9U@"u4V5Fc3+&%**I!lVKZ*X9>G=*ieE%Xl7#:!.,fkY4d5k0Y6-%%(VlK^bt+amLIL0fC8([EhA?9\%tA[$/R'h?aPPt),eh^A)C>&ncB_ta"[;t"$ke.n=I#r)WMgr9L*:;%Wt/_.`=0:e!r)&>jAGF<I@@2V18-_038#[O=.J>3T=3`i[Z9*oPJ-FHG+@nq";":t1rfoM\N<Q\(Il;jMm6MFc>C6Hk]2E]5&g2h%O4Y75FBb\(UoOX5<b>^SaU5p+(]?C:-&!j4*t.OP5p+aPDtJ'39,<:k2H2h`1Q3_%%Y1h:4\U0u#[`.]9D&d]N=eU,n"-Ue@&<\U%L?!EELL3+LTNt*GN;Kd#TN^iQ*LiIfH.M.U_nXn:XHFR)4/2B$o<S&0c'90N$p`*A$mB@?KY5O[U9bH.#_gpoRqIPDL5G,A&WP>R%(j=o02].pI\4^^Be1!f#b=tn[c\@)N`\7k$-5*F5.^Fk0_b_jfp\VtAVgtef-U\(&r>et;n2]eUAC`lC>+24g1HnS$mBpO"q7]8c%eV3e6R\9qUg+dW]AL%mrVTe7t?9X+H/""#]">As1Z6WL"X95/]"[rHs&g`?[YS->ciE",$&Alp:XNh,@Lh9pKDSs>u*,HN`Z:l3K%4F6=*Yp3Q'7:+Xt'B<7J"l#_obAkO0R5fj,bcER^2raZiCMNsjH".NkJX/E`K6upe9^h>E(->09FV`N!pm<?YEb0e/ihLdV#f*;M%Ti,("85-_I8(CuM)FSN/AVT+M/Yo2:Y;Vcui_QYMomCeag(SLqEW([$CT"LVs#.1eZlHLhPo+[OMUl)W;b@HE-d\%=Ea06rESu#0%QK=OL`6.hca-%4PM99$joU&0#DYh4R-F^_*9<7=$\ser?"Wo<jW&`<$5qHW/UrhbhFXgfD"U\jDfn_/:m,4oIEJ8L@O;SXmQF:,K%e<7cVZf&Wco0)M+YT]i$XZ%U'ru^!D=(h=0N4cruK5'aR,+qR(P$U?DNbqC&?LA)`W##P&iF[e<&K8pR;`QKP&(G'+IZK$BbQ5d(%['Noq/mIc>1#&dc"R<E8D7kffmFcjj+5G1_\u@`dB/u:5GeIFLlHE-.)jJriU:4M/C#t87m]f:5HYLS4:Y8nYBZlkYaOW3!)00)`%%U<+(2u>K]dr#](HoA:X^kaKU-e*K&R;V5cmSpA?p^pj!7q[#I^OcaG^KMF-kntpp?hWplBCc"JNJUs"G*e08B5NAT8&j>][-=Z:%gD:q\EqQ3gGEl.2'(lJHk(f>ia4[]%m#-L^K!29.'K8q`Mbg`U3Q2HP<9XOd#O9k4efP%pHG3!2_5-eb.K&mLFFr#2A9[oGAQ&L,%N5\N$jNQoa^iRbHBR50/F.!Q!pB.`h\:-6-hJt.Iba)cpA+0J?#DEK\k7>ZP$Qc&$!O4?(&_3lQeomB"MhSbnR+d6Q[8Dug_C$8Q%i^K63h&C45.\UHA%%>kQ]^OASpLhn,9ppJZ;\GWi40YpI<[)6#NK*#3Gq(ja=Y)`qDdI?QrN1\VpS!HiKk.Ekk3O:VkY81Bp9:T(%fPjOEMD8TE1M6et'=-Rpgk*5>0X*ioe8u\O%_?#sSN"<hLU5uk[-d,d_EpdW:mET8Nelp5S;4M[)bg?DjI-.0GQoZqc47.(@,]5o%TNMMcd<oL7T!'fl)mr>>O$*p+2&Z_nf"`>rg7?sufRiQGX&9"lmk5'KF.DpC5Zm+0Wmmk2CUr(i=T'*#$@W_2-Za\o<C:qN>JLHM%(u[Xh3X,AaAnLZ=Qt[o6[<\cJ8ok!GmP$i=@gm@KND6gtN?(*H6@dtrGDpZN4S`f(^M1-C,)2H5!pFhd%qk9elnYXENTklb26a+n%/@![U/(U'&1kB/\k6HDl=BZqh"U8?&'&1Z2,'^gs)b)YfABB%;F`CMn%8G'9@8%T4dTu.CX"cI]U:]%l4@NSmH.[+KFhnb/8+sB\%le!ON!#Vdg'r*@n/IurWV0PNcZW_ngK*SVSR`Sls,fcHUW40EY>.kj%FXE_Zm.MV(MO@S*X_B\dUWZeo"UZZ^\qtf@%]SCSg2pa0%>QqS$p^T3`(Q7d1I;OA0B>eR6(UMm&kK^NbEQpZ4NZiA=L>\D<%0JMu:(?FKL_Q;%W*'X-?9FUG_($[:!4UPR%Q7Wuf"G1D!dW]*%a;f%#QEn=$4S!Hte_%4\Em?/gXPAof+O"IW-\g%sDqos8"9hlijBL3BJ_WAF>_0jE)6/WS4".FfDH<:oeVJbDOCea<20cjL1qmS.%N(di"mlXEL1BIlDo]U%k'/Nb]%-Il[%OV&L/=p^RNY6a]9]]9IeZWct4`I('</#[BOL!+jf[6J-(2qC+.g6jU[_4/_Ng<hCH@M8%%BNjHI7V`p#U4=dZ>M]8@M4'MCYQ9$6!9iRPjE1n3S5R089E@JPcR.gVh@K0t%A'c+b^Q.l5&@s%J2`gr(*di-,f[Z/=&<;jL$4-9%fS7e*DMPd)agW)A<):P';lZhL,j#-Gj6MSlq9)=kbp7t13m/'i"k(Ns+QEpAil,,J.1-66fg0<.1fet[.T*G!*gcEoju8@9m_-lc%e\&,EK+1qP\)e'S$>eR;oO:.EKaA30\gTJq)`;\E9rm.HJhd3tO6Pes6G4[o+M+PYm=HHiBY=MK#cGJ[5!5#"#dm?$5!K9`Ot_F&%pQB,IZ\*+`f@uNS.SAhM,7R<?#6I;mRI"Q;pboH]A$NFC#*,0+@iW0Xn.rH($*Itk=4rJWfXquq]]-,2<e*buF>>e]>-4]p]T<3b%?3sk.`*sOn9:Qcd0rm49KYc4W'C!bc:7id90e2;lVYU98ofN567b\>d!Hpifjer?!qa#Rg2CcBfi9KHS^<RC8p+B%T::UL?b$1@?%jeM"teSK=nNKs8:S4;k4+,Fd#>WYkfER)EopVt&&?Y1#b'Gsd?[M/rIgcWbdfr4X\kj=u*_P[=FZ5`8^:ZPdD5sKGF+B6-=l$M4n%ETG,qGG:bUlFX2JB_\3H0D+s<B>lK3G$YnKT]MaIaIm;M]qlK2n.&,.e>loFGEDZ5p^XpB,*a`2^pu$7NeNl]BBl':Rf1YWTYN=P%Z/ChLBIIZ>bDNuRE%2%r]6\%%N6t]sq2M.hR,HWaC+:O*l++,EJRP`?O=akqO\eu]DBk(8.*u)a&SN`)ds`u4kd,,u(uKlne2`+*%ffrj$%DGOpcdid2>XQ-\)E2l>38OiQ@_)e95m7SBAWTqq@3SNpp9Vr1C%0>E"g[2e%T[M2%6&XJpg"I=[c9GoL5,hi):'6M'M(0V%!ZbcN0=`c`IN)5X2Ht'Z?K4C-YeOoh68jmUdt'qPd*)KcD,#/FjjO2L[ET2m?!8U(#]oIBOW6$OE4oM/kNbe$CDL/RL:+9j`'7jH%,sGa?0.(5T![NTRE!<;PF[L\JX5H[iU1+*DVG<H!!OA'PUY2Pi#J5^KD0>okL,KK:!ji=@oMm5u)K=slc.g6MWX19m#j0=7bWa"^%k/Ps$k'7T:)^fnHOTLMr,Xsd3YSL0$eM9!DfYOFt[op$B^c%7qMcG#9^,Wasl=*7lrFTEEdTtLBMnY:RS%6FUD;S?W8nL6ZC.?$#%fRRf?/_4<`W?<sg[mdV3C@ANtAt\7uD#e:.$ZK0LL@o?XJN>Ad?Qm<KTnfVO'Kto^jCXQO\RfJ28oqh]#FZ!;^p9B[V=2&k,sMVj%,E@po[l^ZK>4:_h4C;G5\&G#/VFr\\X#toW>B\i<U@L21,l*R5jV*7.L3NsGA_`Lo>*3UI`qlad;EC=^/$+'H0>V3@ld`lq8tTaE%/G&hRm4_me9DaLokVA5n.[d)K"i"&,m4NP,X=$H[lub,_:pl9;gJ5).#>-i07Qii3ZY`?6gF1pZ$4p9?i;*5dpki(\1;f;3jsDUb%i)0%PF?i3uA[h7K5ZM*,X6[U`_'EVIFg(m6ZE<QX=^!j<AKF>HYa`Rp)b`%tXo/-mmkA+R@\1fNgO./.e'g-o.froG1%!#d++.d+%o]u)CE^VRreG&!J!BY:re*=^\Ad??[GeUmE^0nh@F0JRui<oCiL9LRBF);I3/n5,Eh]hRT)6gJrMm_NLL,fSUBJm)IL6Xa"f4=sR%q<A#TAC2!4C1DD*.S_.Z0OO6-O*OA!e2c(4FIPZ8PKPdt)=dt*@jp[Z-PQr3;9+Z1!"P@<p&S9,2aYc*<jRPeq,FOM_"75A=cTcH%kM'l2',GMU7W3VC'=o',\Ac&(`%\].+]u=S;ltFQp:E'pB_liEMprGCrS1J`i9Xk*S>REb%^H]&i-hAJ<D*_HO)6h+,d0V4alZ:!%,MDr3@Q$#AFL4:QSi>>`I7F&`Yh&=WfW+>c`V_DgJ,l1dMlk6!kuPN'JEJG@ZE(cA*??Vea1SH\b#7R-[dt7]GA:[RfrQh&R?Ic)%N$CCT/acMVYQ7[H?la(cLZq?Es-Xnoi,,&Mh(7L%CGg)7Hd$opmI1m+=6uBa(XmDAb2p(Jgref:Q]`@_M6pF:'7luRXa'Q=(Gegg%G_4C&%A[]E;JeFd=-he?qT?HZ(a?.ie6AlEhmi7o[HkI%fu(8Q1--'uiSdPZ<F^)j_"f%7gSt@(%Z#<^A[a@^P,.$s>*^&c!DN#0%CqAR*As?/]<GC-cH23p],LTNG(#P<W[*2GWT>e)q-Z;$tG$)d]r:P?eMFA>!$i$q7amP[CTSKGkqTK(4#J6f_c!/ZO<-)EL_"75Q%iAr=!R5o#p@,1HpiJ=LfJ^%,/Eu@^O"gh'XC`_+\?F"L3D0'e(0>4*Jld]KKmJ]HV;M+tr[YP!5D8Ip\jB9(#9m[A#c0t84;U-7J%*"-^hK]g-+;a*2nn%d))&d-$TC06\kYMs>p:kR$fNB#I?1'p_9#3Or-Gh2r>ph\$c[K+WTQ\C@=Mu'[(2iWsT,;Jo*TKZNQl50%k%2jT!P!M\N\gl0cXb%?)qD:';&&+l_t.#/QqChX](P\H)6m80,Z%#8_]d[R-SLN`'`!g=Fie`*'I!cErm=,NIZ#bFuDR+5jeLiZNL%S5)l7>Qp`#J?r=X/k)G>,8Fk)"1nh^*C4"VPa`"e/A^rNQ.bgibK^4C@Z9_RO3LO>'d;+j8iJ]_p*k9UcN59P49&!\\7qc?fRV*(%cE/L`!\I`OhR4^s4aY24PoJhc4IY+%-_.5J1Nm9F2#8Q>XTpuPUc].B0!eL[7*gQ(X+*-2:RkN<7_BXp--b`A?u2,Y1WHT<m2UM.%j(gMo+'%"LBmm5fcdruqj8:^FM)Yq[JU2*:GhY>O4I>Ch7!cVZ[^@kU+T4%4H=T3ZDOiL,Gc!_]>kU^H5]QkMo3B*QRtM,8rj!E0%1sH0@N?o),c'N$5:FfBA)`?B_P5E`aD)[D3$I]8)W1b,o/1Aj7'rn`[^3NCs!\fVFG@1RdLK@>_>9B/'kZ:jEq>0)%@8P59UDc/\%a.Ch56c!5%:M3N.[dCoMLH$lmh5_Bn<&'-:AJ1U:gB<s=DuaXLmb*.[ap>MeUn`&F#\/$2#B0Z<!QH,*_<^I7SF"^^XIZ%5YUGd@%k=cLE@g*f/LWp'nEh:)"E^kX$_7dI^ih"Z8]32<i_XmH.=\N1la![idGT'JC;cL-?_.I*\ddYt/R\mq`/._9*_>OoL2-<J7FS!^s%@JE'=ok)k+&T"o:s,Xkf?;G0'qF/^>E"?=q)bfN^2p$X;KP`D&i(Q$eab6'bqi?0m7jY-U2r+UdHd7)cZY$nW?F>keV,UHp?PP*M%WM*!@8$PtQ<irtW0+/L$&dY'=9(l=s3U+>C6<hI;DnOMP*`j+o9QCp!("1!f-=W,i<s8C&`KIEUVD'19%;9CIANhgN$;uF"1JY0g%Lkci6WrSOknhr)Y8?qZ>Mdq>YIpF=n-)2Z0Nt1-Aif^&I<f(iLJfLQuJ>4sCCC!EpO350b;Q)ec.N`0]L[qB/)c2CqP!jmE&k+6\%1Jg`^9LGW:6p_dn%7"\G<fY2'"*Z&G=q'oc*:!BQ./,Q>U:Q^>2n]?QUsTjk_&FF/Ui`C%KOjH_89,K0%Nk3=V4%bVBWNM3JKII>%Hc`B:.`43<P_OF6kE-U<>6puNJW$:#8[-RI!Y4FabJ5t@04`uo1!+4oK&pHr)5>'8o])Z=$jSqiLGQ+@SccfuU5VJk6R1ncV=;RQ%)(`T/QaW86'.KEV`,Sq%`3,Xc`A`=*aTs"@Ld6^,OE<>3W$A!A$ksWba/UI<0%iB*a\,rGXBJH14*pC:.S).a*^g=VUnk*tcW+;g%Yi?QN-1``^&dV4MNo:h?$.^d6\"[rsQTb/hJKU+[4d^V!MH)Qin6(@>==LO8TP\Aj3u-\*Qbr@R6<8+rQ$oeA@RHBd9uufAQD$4<%"AMj5NoDb3hZ-OZ>olsMP.Zd5CqpK^Tk@'TrloiaiU/OIpe/ROmMUR,-6tDJ.nKZVfT8K.Fi]?.q1Oq($$p:/c)P_AWl5FeS"Xg6%K)D<L<q;8/lpqFhY2-a\K"]Y,=1<u?@YJ4j.@HXL6t-`F)N&Nt$;q_9#&KF_MP,ZtSB`;s;`P3k;XtK(bDf+HlHks[k/P8(6Cerr%)F9@I1A"ui,D@E[Of44UA9lk[/fs-<bH0u_)VofUc%Xt;E\;&7EN(S`;TGPt?WJV/`Q4Ge'uOQe\jY7KTpV!tdkm>U%>:!3cVXiP%N=1H=8YN"CM%5o#l(Z(IQ0ad]`FuM!`"ZdHV;d3aEa4&*&Vq_X-WtI=cs7d15\VD7bn3K;%]O')f#3U*EWaf/=cfqiim-Q3Mm=JF%,YrCd3[TqM=&qWK)jD[T,E[DN*'9ktWtC.b!Z0!.2t4_'4@,#V)EJakK8^2F1C68i8g/ekg]cY*V<(2lA46Y^4p+?U/B>$DGZi"E%+Arhc;Eg;TC$@P<qN2\`Xi@r,grKfu%]KdRUah*Iaq,.V)b\8b<#b6$:^Ya7!.gF:M^D]i#ncTH`-!Q4,WH-RKg9>`>#l!LT-,1l%4KjDlJ2jK*WX*i5:InV[V=Y'k3MmI##,X+5Gf>XKa4_h2:GdVt:b`:BN70i7A/hhT*q[E*;Q+5u8kG]aR`37q.S!!+1*%<I#-9oT%,*A9RlHd\:(Io,3-S!)1a*nf*'Ob3,"_,F<V/62TJ=I>I=t*4.G3'i8o$\2!l\*@','?dWO=!N*jf%N9VmHh/cD"4p"M&E/\<pu6%eZ9"IlLq5U9!'Anj3Y9(O[7tR&o/,)^e<?t7$?@1ie3/.;4^QEEU"hVZ"9n9\#).19/5Y,7W<?@TLmo-0gN)#a.fjQR7nJnL.>-;%W-PNu<q./uOAN#N+OV)]f;[F/Tj^AU@[YXq,iPP,*`ZJX>=LGd6KmI>TP(gH=N,?O:R-5-.3jbkAT(G"#<7L0KFl#fk00/EXR!cN%ZK5M;b9!E<\/c(94k(5<7+`!K6a]4QDj!6k7fjs`%AZ<Q,`#5fXD7%3U>.63/kI3lROh0[9,`nM+kI&D<D'W(qVhRq0e#@07rj21%78Z(o$Rm<;_?1ONqlq+lL#_:=SIfFg@%AH:98j'E_2ci0<JTKu1aAs9.aTRI/='u&)?k1rcCEY36,SO63>*f7QJ#)=N71qW5b1Lj%G_H\G4anIb8=9nX<0^qM.2ounc@sNB,Br/!%pTsJR>AWh.Ol`&`=GqD;+=.a"aGD-8mR6Eg]=K:c/f1O6Z[!_b!Rq'?-3MU`9rW)%BcL/&H:3Q[;fO5iWZ[(XL/8Oo.7.nbnlADbjs2H=KH;GU(R7=CaN-pZ>a/]R,tmieo&/0Gdl=6^#sE:<9p"*uFpl<o6'4W(Ufn(j%mYO.O-_j>>\06s'0L9#uaR@Zu0okP'\64\nj[`.d&CuST2UaY2ksE=9*#XY]S`>R7S;`Ai+=<iDrIZ?5dTgs8aW6%f<omkICM@6W%`L<S@XH[U*aa8eqX3-2@Z&7IE19>j;8k<<jO&=)eWbt-]LFJ3lYN9Fs<@IC,-6u[EQ.+4A1R:E=_2c'hgUk8E%$-T$M%a\P05Z.e%.n`PG,S*P6L.Yp3DD.PodPE+"-DqPPgT)p%8!gXbV)V*.iKCX:\os5la_NJ']OU.s)j?A@Wi`'2-V3AMl(F!?>0[D1YUjatE>%[W%a,6%u%9uHt[ih0g<HVe,r^^`;"!&[:"EuMi3`7[Y[Nll*]MpEk9KC<2%]BlT3"bV"k%CLK7UnkBlh$N`RSuO%`hlt',>hGH?3oVT%AeS)522QG1[AoT(FF]9Z;UT\&;nt@X"XA_LO:>HR)H_t4Kdjk@WQR]+7$XcQnPRK6.LL2KD)%l25g:0/obEA-7k>lT*Pec-(.nGH%\MV8V8b5CC%1%m87[6l1nc3B2^=EV#!.n"P,\/LF#K$?QdcVs5GRUk!i@rSL8k_@`X,7/9@Rtr9;S&hB*ZFBK>KEc`_a'"8n^QJ)%N?"f(.j_*)jJ5L0Ua(_://=<sO%R7LUuDD\$.KDLeH@6jRY@at#c/C"F`aTT"j+TMA8oD49,Xh2:sCY\-PLsfA@XNm,Sqds4G]t3%A')ej".Bm'_e<1J]0B7NCU0@#AA;tM8JX0E1:p^p>&<IO\[=kC+C7sG%K3lN<,/+;g+J4TMi#&7<;*[`NN5-R,QPSY9F<N0N62JQ%[1CGO3Lt0(D(4NqcAtW(It<XsaZ9PjqakO"S.^dVl!afFX>RqBO42h`Vp-LuC93Xk(>^kNEh@>LbQo%28LFP*&I'4Har`dTH(%`*%bn+3)>$%!.Q!7E@`V0.qoK7k8-K6:IJ\Y-G'PD47pD=T:.d:>V*hegr=a(.UMe4Z+4/-:Hdn(^&CEO>U)4J'.[#i!FXKVNYRbD`S%7qkj/QiS+@)]hDC)%`T&;&gs?2]kB3<RnP$Oc`<(Ot8brBNQrp8UQ>Vf]8o.6Q7pY3GB?nLH.EY6l$$^!):/MF)mj_R4pfsSf+>I%%;SgEbY]"jR$6E.nHpXpk$`hhpGFhcEHDI*JmggK;;HOV?24]IUm;HP)ZJjhj_^?fIdX[g/D.1ImHlO6CDb04du@JckXs4B.UP@0%ZT>t*;Mm9Nco2t9,u4V_=;5PR$'W06,C10ADSQhhV7.bI#p+];`"Vc?="]6OZ]L\LgTl+(e3qEkjUt9tUjPEgT?-R!/pTFiieH+"%k,#EkI@#!E7WH+1rr8;;`>UoZ2m=2sAHFM(2j)CUYV+K6,FfJ8cr_:N<F+m)0.Wo\PpUSledc6JOTKCYN/f0V]2W%`(2HJE-aC0F%N]JW/^1/,lnu&D)U0-i(ZaCS)c<?-pY-k5(=u-peD4%E4W7/-i--fdoJm[g+-P_uT`TdqQ68Xo$m7OYN&S"Fin`58=7$KImM8VDX%.5#=m[BtIX6I7)q:_i#sLG_;Z9T%pa2d8G^-FsN*g.YB]EPs:uP#(;L.M\;W`EF%uNE?lFNE@LP^e*]L8Ku#sp9]`\.b3>V1"G6V%C;Q]IDPKikF6XEO5QX-@)WP=8/<uSgjTuE5&[L.2_%]4JDj&Kb*jg`6#f]RFq*pOJ'#.^<$GZqN:K3kCWO8'46o7LJ.ZC[7PkNX(%/0/aflNP51(!-8VN;0>[kpmOE1)1HL_-T,?[CSf'ECp6W`JR1MlPi40;Ku]-EUrFbQ7FtaFp'pl_D/GSQ!>%KXMhW?J_8/-H6^QP%N:PIo<5h-Cs%Q,YXl<`IKU:51OC`,a?T"lP&p`0;=N<^rcV_SGm,97J)@fBR83.7?5V47TMS_\N![RU')>IYHaDP+=LcEME6-W%l%dI7iV6Gc`"Lhh7W5ZVfce+&U^Z]'_Z?K/&bdTK"AM3G>DE/fa?Uc9FEYnHMJ6&PD-GmT=5W%5-i9/p3kVL(0VEL'Nud.3@Yl$JhU%Pt&2aY"#7fAihL_<49-M5\3#-$rh.X2$;t-XC37-but=o]33<BGrMcA-uW`5"-r8T@\A$3.h#CcZckYaDDj6r[k1Yo1%tXFDpfF$%s66$4s4-A'`5J+=[q8Jd@Zu,C.T2IUC*L1lo?np/PM%u/+=Nt(S\u/8I\#ulINl3HeTB/)rAp),C=`d.XD-8gNdY>@-Fd0m9]D59%Uir/6e<GEM,c"h)RUm[E<L-3]E>LAaB#A0mho%sDQ\+DZ0p*hI(+7O,8kYUNSgSM&9A1^DMNp(h-98fEiJkPUMSu,`ZH#N;.2.T8%01KF2i2[_c`-@rP2jR*5?Z7=O(8NKT8AV`SU3*@O]<T<]ei>>t"+63*QCA`5iJZ12Mc-EN>k^Nj.LBhiVSH``s/[`hF[<Hp$.<jl%b6ji1BN?+8]],,[NIpd*MX&X"X,mgLL)bdLi/Yd!d4cg[T.$D_+o`i_#)^=T96CDE8n.nQ>S;l-]M'SD$]_ZRCVgh);jLiR-g?IS%kG&I=Yb\93)\>tdP#MKV%Z)Sc`9u$K/h^`"(_YY$H>"N-<bN=\(0h1^=R)7W6;pjVQ#Z^@>aq"_qEStN\e*=U(&t"%Vg1'AF9o.]%A!]SQMT7'd9S\u(KEOH)-Jl6^!EJ1YLh*CSI(qQ-O%52o5OKdHnq#DeOGL/jGGI9lp.%9T0:U4n>)V@qGi!tNIWl?'9VHr9q:sp(%jGH!us'+>8dL,'3SUg=<$Y8rc_Aj<0&nHQU4Vnq!2"RFUaG&e'&0,XfJu1tV(d3^A;Q0:;aX8WXE1.=S,e/?7WnSDt3e*\k@W.G*%O8r]71O"cn'0A36rpdqS*F)A``*8e$56rqK##@*T,OapPTq,"2iUA8$#?/hQAD[q)JA;7pY>Fs7*3)0ADO6,hc%L%>AXq5>3,j^0%9aN8R(=#3519#>8_D*#37bl_1DFGt7YAMD4Ghk,Q6k\iHbU$6--!`5u]^p6:gubGR'-i^19<KQPk_peD0Oe8of1R04^bnoPI*SR0%4[G^4P[9/Y/]H[^r3O33,L3:SrW@eii(#u.WQW/5f%.h9r6S"aKk$9[?m/lt6H[)7EC)-M#qAK-W[]CX7oD:gaoSA>"Aku(FMtK[%X\Cl0>4isX&*0`?G1!>iEbS\".XJW\#;WF$kuo]]#uLD:1EMh/2OL81&.4P/]UmXq>W3>H8hU\jkg/#GGGd<Bq(h>WZfB&B]<<0K%7^"UjhbMpsWIO_&2u/hV$jQ[eZn_CA[qO%?GW^el7JC?\/e/e@G@X9F^H:NIiVG)-5IgYnA$E$uWQIe4eSX?Db^[DgD];u)P<!O'%I5bJkg.SEc^CV5rUf,`X$VqD<Kq"7*k/TW/D;&\%bfm(Z[>Ln1GH''Tl7*CGe29mYp-6ejDcpR]ps3u1Uof9=dT/bkC#e*qc?/p/%ZK>p%mZ2f$khEa)-*4pWU"\_/^)`otq5('?h3e1`VG`?7F_Zn-BA.(3X15/)FSsTjre&F:3r\mE._)Hu""jO"PhH]<cU@2`mOqQl%h$bp)B_\G'W&(dZM)%;RBkO*g,6P<OHoIX=g_%:_/8odX7c!Wi2bl!Ze&qMTIpq.F9qGrT,%#`]PFJELVLObY64*39^*8o'A6$M-%/RbH5O(,[+HAMr<<"m2!J4rb+9Err)_9F."/;AX@GUhp,ZZ/BPSDNSd,b+3t,LJ&pc4*$:-fP9)bc!K.+d)R'MuF@O0R;;c!Imq?%s,LLOZnPpp8D/qfWu0S4'6IbT)&>Vd_GbQkYu-(B=n%bBA[HK&R8=sR03j4IGY"jLKF#@6N's'(&/o$e7q(7<c'kEW82_9XoWj](%pjZ&cP::@^V5.u"i39]r@0#jMl_dqpED=7Kiu.bJB2@f=4Y$R7mQ0K"RQNV@i'_Pa?+6>I_!%u_Ik8LIUPq90qHj1M>gbE!.9&PU%bf2e4a7/P)%U'HgE6"nYO`VG"_Z(UW`jNBX`(ACZ3t>ais%D;M3>h-A2h@A:!V.uO-=eX=20Yr0ED-<KNdXS_l^$)D2-FQX&eVoQ%BSn;c;*%hT7fNQO'NrY5();2;Br;H6Jgb..P!cPMM'YqR:@T7njGW);)$WF,)64T+Y5lY';tVJVX9/mn#0S5'L]CljKT^-'0b_%,%<NN!+/8crS[)l-5:A8s=p\1W)#.7)=*\(IAgK6=+kU5B')<HHfs6E/fMs,YQLe,sbk*bLa@Mi5;0Gt$efW1.2FB%;\9K><S8T+Bo%<L+b7d"\OFru#ojY/o.,r9k6sM`^1o^#V92`aUWOo-7,41$lE&Y"5rbS.%GV'u`KDSp-'g)_Aa!m<Z"lT%^=Q51/.7QTKf17K8DT%6mGUNZQ3Pd1$B`T@Nrrh(J@O<hod&:3^YYSQo!-':qnfQTsWTQNQ%5GB&)#%h`CW.lBkFsArWFFO<@O/ZSYhqXhmCF&0b)5KEZ3G%JtX,5Me[%+>@HVn9e*t<<)#'GQ66Nh\mBtFVt:g<WCT]u$(,`8l![.2PU]-+WASfMW"d5JNE-^cdjS2Up%@=E6/ZKtr>6Yf,E>'d%</a,P(A1YV`D!7hPK)ZeEJ?BK<6@+)SD0AN+OrX=If/J`Kh%SZ<k^a8GIE8R/":\GWlcpS^8Bqah/B,^nuqK.:1tifBDKm7>3'nU%d`m5,'D9XY0`JP.hgIS'N-ZN=?)-3\PMX_'XaYpan7ANrerO20C\#f0Wi7rO7'6h\b)JnsZm#=,I]$/"T9_NtIs#Ak&@((PC-_e4%BEk%b-Km@0np@o"ff,QF_GUsL\$)=4WSQDFgcVB%bX$%EE>],2ccTDdOHRn`<DMHb3f__1Y2Kf-("PD1=b_=(r\JAN#LL]p6]4f/%\jD=p.BWDcCGG17k5!$0!Dc>9hskJ[7/+8,H+GWaN8#BDe?mu-F]E?Srtu;9W'Udh(c>\?^giT(GGH'.BSD+$Ee4):I%GtDLVH<?%im9BS@+^l+g5,7C$"2@0i*VIX^O_'FC1fa-D]n'>3">nO>Y$;d>$q4oHeP03S,-]sWe_q,Btq3G"/5K-Pl*d.QK5+J;A!`%s5AfW%4<uMtn/H^0IJ]em7r'iKO,#0Basrjjs4M+J`aG;Hr#tkhB>[+&E;&0M3#G$0a`:X-'qhh,ja)Os@`PN]J(-sFg&F6:WCLB%%"iQc%Vpi'rhe5-Xikk`3Yt<IFjXOBk/GO/?/.S)D*W)r8n,HlVi,$bYrEjRCiIOtKMeT5U"Uk0Vjd:.*hNgRK8NLnDBajuff"0NXpQ'sc%YW/(;2#:Q;Sq"u(oC%-Trae/<<oi<=J(\chji/HlFo&d)HZAqtED.#0`^)K&F!M]j3o0W![#];rqr,(1g%"jPB5#9cr0Q3Gk[ODg%pdMg.gLa*sX/lh._GK*#/m-[V)_mF"\X9m"NDXWAk]P\BnROB%/RA:,o!C4=9`NX_f/ir"]*n$*][?'VqK$tQ6,WgjmNCJ+9]sZ?%A(l+8`e3g2c+9g9<+fFA2sj/r[B82J=,+MA)ms6W:*IE]VMYB.\kU'ODQK^@]'t,3D2`(j#+F/p5H)2CgHFm&YDt_>'&+)f#s9f6%O2Jq%jdF=KN-&MqV;&t:ZC&8m)RF^%gAbNiUAM)L)\3_,Dcf<sS*SAdbN9V"B)\X7jR/dHNHkbg]RprpV3QO"8=gnJid0(Y['"d0%f:@)70iW;jVV:iXb7gK7kFE2o"^Zq)[n?JDD$ape+O3p*a!As>-iL90g;]dMdhN<2ZQI>%;<$6(d8k@Pb_8-bR#bhH8b:9,2AkKB%as9c&^!OMTXZ9Q?c,QD2C)Q2<o+T'I6%@C(cd?'?<ca#QSnH'6X014roI"<DK&u,ZBKu,#gMD<nO`p]u?_-EaXJ>@VJlpJ?:YVGK%E>mVpS+1lkccYTEP]JB2D,4eQ@ZAc.d=uCqd:bY/a$OC_:e;SWCo0?-N>38)Q;&*9J"[n0G-n'q5Q8tSXPA28XeQ6`8UFlE@:n+X%CTK[bF;814/?^`KTdcUtFg\S0>#SS)po#pJM%3SR&]6C?25g;>0u:MsAilF+r.N;knl\JJd'9=IV`JD^<PKI>cEspj]`AL&XYF0d%$1Vnnm4_3!$t1+#e-E<_]ht\_%e>*$DlhWI4\,fk6$VR"SUko.h9e>I>;Ttc"pS)]K?:J^QHorF<CWttOn:tYHW,+^L-OX*A,7u#%GIq9-^,iD\<TJB0[HHS,j15=<6-B\@W/T#W:0UN%KBaqd*RpCSG#27-[;kW./s]V.NTmaf%J?SJ<s"kk'-p]R8):FUcVr@bbcBZQ%coU+-C,OpmV[Ku.8iJUlN,dtJEHC!/%h+aB,D#V>lLkJ+[MVu6_98ZL*R4Ok<i\)pLZ_4FQ6\#f*<^LsXk%1=AgDLGK@W7:3Q9&u%;QV\;K`C/<hUdp%#IVS#T%)?>3j]p6"!4I9`j>[870^0HHr%Jre,Qhgep,n=6D_qqD%3@N=km_CS&=g.dS2_>c^/GdW2UbZk,Som%6lY(bC,GhZ@:Q%H+K]D=;)DnG7h2PZQ`k><?BZ9kQW7jGB)UT-Nnoo@1lN0DASVH!IA%m%eld/OibJL:<_[Gl=ji])&V;J]Eu'["%e.^;P$.\>Pd7L:I%>9C_IFWJUEm(N+GCa$gjW]3dl5!CM*"oAX<3aO2N.NNrinq$%848a0-2lME5\j(@D<i7:)XUD)BAF]1!rI"G%Aumr@KpCP`C<V#t]-m7t,sgWuB\!9sH3YIl-7S4s8iFG7Y@'i"liqm\6if3G<`XP\3burVG5;o0K%!k8N"MPF",<8NTDetaQ(oG5%o*p?Rltg5k^<:Nf!XT46d4&*2<2i]s\o2_KW5]T>l[V2RGX]4`UGfAY/[^>[?_'n1D7CYVYD@VF8dUW06Ylab#GTscX`Sn^3n;br%MPaoeVeW'SPA3,)jE":a^Jeq=:95tm_@i%>X0t9Q`es3QmZ4UJ!,c=mrX:;PEFdUG:-mLMUC%h\I<.iM>[7E33)e(->f;=YC:=XY%\DG#X(tqX/r(fEMX34PQkc\rnoPaHZ(HoJ14Gc5l9KUcrH:Rb6W='uH(I(QNK;'a__W],DV[q#X_[Y`pk,qadV3@+PK_R).T3^<K%ct@?W)ajS#AsqrDhNo*;HSbMfPM]g2lERQTSXqZ-B7l!.B(ki-P0!hsls&b>I>I'1gP\B^GQ.GnRgPZ*:V>'m^K1`3Ia*.3Ls,+7%PSFHaDJ"KaS'1G(@WiAK5C*_Sa3W-<Qa\YsI:i&r`HnY2S2kJTd;q)5+&,Q:kFim)GPmj>0@KT_f]u%5XA@JhEPM'$T`)8Rqt]Zu%cXppYo7^*)nrhG%-iY0oF1KAIDnh=0dqHJAE8o.grGYTh,LoqogaN$^qi*r3m3[u2KA6rRkB!/b:/eJ;U,R>5YbCN]_Q6`10%Y)g%BCY!ZJU8L=m#..S@6j>Cr3t(K9!T3l^(\8YDp7Prba/rIi8i+g+.[DXCIHE74<0d.c_Bsee2R6)hp8\(lZm?FYLBuHf*^p[XYF\%%kdRg@+aNT!2XU-bn"sXKWS"sHo9sgenkQ)Q*oD(ZHDb@bS]/e=CNP>)*h%443s]/J/34N[I#Wc)!I*i")TE]g^BT_.?H';#S`5!<%pO4kGR<?XdZWCkI:0h2UXgku%Rei)i)'#cn1WAcVe\'?ecd=q'q,&s8o^&*KiD*hM)]?j_T@?&EVsIih=jYIZj7IJ6;M%YB`]<_B%q3M-J8"GBd8uJU(ZBRsTQB&A#E1lMr&;D8?X%kmVDdT9.7AoC)(b>$Z0!DE^\s,rSn#SQ5hrB-a=7]1J4E%R^YKi]A;fom<DC[aI%am\)jACbH;2+X<@F=MYYSj'&jbr^p9lV'%Lgn6N:2V+F.0=H'`jDN4'AVtDE7>jp[?16,'3iD9XoceP5@*X@r&*BFS0q!ZS031#C%msI'=8is/1HogtmhF*E3?"C.EL"DrkAus<K9IU`dU!k5RVrsVUGh34@W)G%=+)1!$\Y8='pHln=qe6l(XZF]_f8"8No1grfPNhQ#%c(/RHe^OV\G,>":`SIRiQ"MX/I0hXY&-%Z8VcW&PS!Rd&:[-Bj<H\1X0^;ea>5bIK2Q]#'@ihd"8*6A.Gd#;;?VDO^Ru[/MEk,]5%l,1QpcJ5GK>NYJJ.^*rO`hMblqP<WN??plRmI]f>kJFORn%-ju>'0Uu:.s_d2@,_3p#^TV]M6=idnW+[66jZKVqu1(UN?jPR!Psm%1PPhtd^7Ku9k_S2IL?leVgMU]Bbheq&)(`]pZj_sbNjX12%FW8gqej9>W^LLo6H_I5c6!@:/S@T^XAf/7eE7s`r!f`e+m\Xc&6bH%T%Cu?T6-O(ZPV>j0K>WZT6R$X[.-i$#Y?7(@We4cNht$F7+1HOHPOsLKu$@QL>4W`?8?`$m<!8-D)=c0Bi[IHBr3\P<c8bU1&Y*)%Hme/QF.01`FU[+EG<Tg':@0l%6nM!np\XF>UtJgs,7E]-$9NX>qXkYGrom]jIRQbFIc'-8RXtE&c:^r+VXrW#l+W'qp-YR$p(Q&-%*I[<;=al?q09WN]=2XCF\\l$Tb?r<))Xdos?SgL:F3Eo#Q!m:9d4&`(lVd>_S$Ms<]@1Md>C;F&n"1]XcQnNn%t52'?f)+bP'G\l%GEVg+c-,Cno'8Y,n2"(Y)E@HSD+6XR^OCRT-]]joIX9m]HY-V6a1g`uagpN:Iic+9`U`?aVg.cMobFa3OqM;c)8BO!d?>s$YH:[.%>-e"9n(GI#4gaA(IN`dglra8`OuqK.XhJC0gn$`EaYDbE.3'F%UJCY`\ih(4<G&0$CG("1qc`kZ43XY<7Y>o(TN$_&QO=hrODHqL%]YEQS?aYs]TT_B"8Y#7cb'N\WD>CQ(Zr$X3:[*Z&I5Os(GouPgQ)S&uUP6_[`>cmYB/`F#dOQ9ck6$+W-/#fk"s7HK_lFL;$0L[t%4i)pJW[IShY'GCJrWW4$)(i[sS0rFO+W-K]H7r4UX)UOM/qC=XnW10r96<H55NFqi?MP?iI`u.<l-tCBa^56q"_hZI_ot+?NgApI%@Y[$)/t_2dLBT?fGG*6o86e!Tk9;cLgIa$#M<g]XF"_[jH:SK\mbRgioithHRYT`Ece,ZpES'GWO=h<\o=m;!EGrdn4ri)DhY+,l%%`T^\_PQ+0d,Ml11Ye2Zm1,&bmU\M$IG'IN^E2fT@a>.JkfA3p3HgJ)3alXU+B-IBMThn.4XA2TbTBA[(-(F8'mJrjlb[`/[i=QR%2uVaB=?<@+F)6=U?bj4rq"NVU-]E%;r4^XH_/f*3Q[X!BgeP*d<a-:ia^^307qE]dVR$lJaa]`kLJLQs]_[C.o$6qs-cDQUG+Vbi%^D2%aF3S1!jB__%3H8_lOf?%)H>l2WTl=A'H'ciVK0O^]JP&)Rhb=;4*<_DpCFlG/Kfp"(oA*TA#Eki9Zm0.XD"+#*.@j3MI#`3n%.?aM7h.#Vnbt\A_n[njm:,#lhDNXq@I76Ba]HC)CA<JUQau*$O/+sa4<k\)mb+s+V.Y#i07ZpYh0o2YU[q2cqEq7gDpb/Frs!03.%e\RkemPJ(ce#q+MAq?/0_?$C>H3c?^nYf51^@mMSC:"171=Db<OLa73#-!.+a]&M:BsA5aMpOq3>/,WPo)9L!!gf<7pT\B'LO8DN%&XsADfuR5Bmj3IVFmt2*.uRB]6N,#)JqoHn,=><iN4d<5J;<)`r;f&/5C^jJe^^ZCmrp);n?-"g?B[T4,L;%Q6VHEH/<mf8'CtW"%`N,01GT!t/mQtV`RXN?[UHe1fE/Eu%A@P1@.P2aFCR*R4fNE9pcnj?/)e\7U/E.^eUg8$+LmM5&I>FL@cL/kHF5$BJ5Ic>EjoPh!%OIN7@-XU"EQ!a)q?BBd2i,F,c/A<icR/JWmCdRnloBBnLi:_T)m@qV-dB%Z-dN?k(\fn?#5k>&>r1)'$BUVgBV[RZ-gMLT,^RHoR%OiAgX5u)mcG_7CQjKd*g9<_W8=L\tG9hr&WZP-'iQ1a''cXg_ZSm1YO.f_G>$:j<>CsJ6NX*s4-c?/afYIAT/>R?TbU9'h7I([)(%Q3Y("`<VHV(?lp#V`ZZsgiE,G$iF>rWhc&`h#l-:lBK3`FC%X#G+,L;DhhiuJA[f1GL?$/r+pU2J>(muGJC:UP045$Kq/if6P@gM%lXhE1gm*&1@dHW(#EBN2!ZqSV^K`B70,K(?b-?@`'N+=*CqQ"RFEpUSDfpn)dc:g<^A[K=o4#:\Me7R+ai#^8eI-8W5-/JPF*U?8%VnU$5USXctA?HU.B-\BJ3LJo6LLh=Y^@T=g76_6^<@afKF3Q<",4$,jRS\a!IQ]oZLH\ShNn<t8Y0Ujdhee+m^@q-V]DJ8lglHeO%:#/U11PstRAp;[D0ilc_dqnh#kON@'U:m)i';)H\\%0.E>?ku7&sR=>T7k6^MoX(0AKR;A>,ZfQf)88?RB4$RSZ!?nH261Mp:M[E%[QQ8M8(u3;o+I[Y]@9TO!@8F9Q&8j[(+3tr9T`LahPF\JP=(4&pY!I:EcTNp]ZrE_0O-A+=m>M2Do4$YfK2(MKU"S9"u4Sp"M5!k%RkqRnCo-K`(%Ze.2(7efQojmQ8'7Ya1%nia@r9ea,2/Ln)dN+$9.tCU0uKhc3m;5dId0In>e2e8*'8:bHoP&rcP>Pe;i]CPp:%rE%PF8bP8(OPr&iu.`cuM+HN`ORJ/P0,K7lFEfJ>E$P-'H=WY;oI?c4pR0I7t[KIBA6@,ujWa9n_dXp+]^fY,8R%:No^C8%q[`h%Sr-%B$G/[.s=+u?X<VBV8jM0l1YA15%kWa1L+8L8iZM[10Mn@Z]WK5i:<?+jP5>7h\RfgPsh-8n)c']2n'Al<kA$1?LD[uFh@k$e83r[%NCpVmS!)lLbQA)FM/t\F%IcZn?e#4Reo!<Wnu49,2`i/5?[Q4Nr:[_E]kDE.?S".0W?ijgbB\4D)O=b_'LZ=O2PP'*5^^Ahp1,Y$%4Ba8oVsL6GST/=01UZj]lATCl>$q'<Ui-di'fsD%NG&fF2ek(K^RLM^%'sla]8)`RS'W]GVDY*Mc*>2?A)&a'fW0an%SUOgVaU'E%R*b%I%jB*<Lpf(2"<C(t(3?_B27=.BMFVE6"66IuRHQnA:2X'mLo8Ach!,LA$J'L=TgdAcIZIOfmRks(>05L+1V(re\1G(B,F'/8%9%;kT,(&E^UVS%qD\`9D53^P@'p:/n:$MY*HjWtqbeG`iRG>^G/F:i405l6s?0;2Q,]sWHT.ER^]Hl2DV;H,b8^cl#5a:6=[C!rB%bL;pUo9d3n=fs;sS%"6S&'JTEV3B8kF6ol@\TQMLGWRDdftuM19IKG8nX,M-F@Z#pOnh$"oZi/E*H<W9B_?Jr]+Sd>G4N"PZ[77?%r96T9g=biIZ-DaD\%k)YGBdsAXEdR]VmVVZ&MDtZ::DoNU0gdQ2I9mB_o'"+MJtShI;t0??g74MWRdHYgW03[P..KulH&3YkOL[D%l<s=$RliXO3jOL[<K9bVc&i>"U&AHt<bU*ZM,=B99tqn<\@c!Z-\kHMUr.'.^jY;.*\/]79\sl0b^O@<3-cf3I2P<U_!1t3N5\-E%!?,f]#T]L3pTS#5TrS/b!Mb(,%MB=r.i^"rCD0s$I'Q1<[kNc,agLQ'LG;h2[^=$U`j8-O(VlW(g4s1mEtd2<qoY[Z2Kh)^?%@j!%&'&W@=\fmfq^]@)jNr[?kt89oAPYd;Dd.^:HJ#56!MWD'GVJ_5E40fpYHN6SW[6D)hIXkN:%q\Q(q<r"l7gp(f,UEn"-8,=>iG$r%0XDh']uJXo]edEh0nL?J[!6H?jK/HCYQ2D'?!]<_AotPI*:h%i[>]N[[p_E&\liYnN:Ui\olm6Jfk"ZM!#hUO?d%M`H/-iUN(=;D%?-="%(<\XDA*8.qml=#K#o_^0Y3"8B3+97(8&WWW]Ts9MB%:\Mbb*)D>)!u!o'pdE/UpH\>g#^2o@).0[>]ogYuB48oD=?CQ=TZm%qXe=XftZ$@;;'^SPi\>21#;]>s0UU/s'rXW]l.JcdS@9]<D=J2L7IK$WqNN1I5&e:L(JXt3&12jpO2qPn&3]*bj*5[TB[;1olGD<%0Cr!4m99J(:J%hg=Y/2?>tI>8clYCt0-cK^8_)!.qt.5$Hm\+$Lh!b8,1NSh=_1W%*4'l."rc\$LOXY:`q5'2Hb]"H7Wu(ZRkpU[%^!tM[R>V^I/n->;e!2.^HL:HUp?BKGaC'*`a'@-Nqt/T?A;Y3/ruQR1<.e!,bh]4CPmt^Q[g#%<0spT#ZFF&`',jk7>[BZk(HeB"%s6^2!-41GHI@7$\Jm[Cmp`g2Y7=\S)0]!]l8/u3@5JqB4om#2BYnR2#=jK%,-`*PeH4K)f]n9en-aWt(l6qp^#f+$!?7Qfn1O`]A%BuT-$k!bs]8fPUT2lClB>V2pVN\DC,X*)ZZZL"7@FR^4YRFQA(NAZp$PFcuUn"qZTla7t_`j/P@G1cD>G;L'@O<ll$nLTo$e[%Tb%:1q\a9GN?$)TWkGqC9VW$*8Zi7lrn-+>:B1W2>4W4!61qPT&E3&h!,8recV8jlP;:BDg`tUHPsbOOM9Y9Q==<3?W7TeG3k6K:k:e%ifNkKMJp8/4?;=?;n.*5F"jjOY6Oc?9jVCJ@.`Dt7((#Sj08WESQ`!kQWH%nLc;\9Vbqr3F@o78V5JF@k\X-7aBOfeRT.a+rV7,6%I:!7"[_nM;p@Jr^/Tu4[ero3`iaQZ'mjm[R[01EF1mRfj<c/b"7B3]a*'SHMUGUmH[CW!q,uOVKC5j,hQrBLdB;Ho>pC1B9#HCl=%#:GH2YdK;iJ)3TPb3P2_/#Z_7"37nkB,FsM9XreSdD#+9pW(R,`6k:A%'gjT_;E\_icBuNd0bQXW,Ik)D&W[gJ'2E%Dat;ZFps%1%-jpKfJK&D:SR^=cK\[7FR[n-bi5k1O/!,R[%Q%0u-X&ZHH8)O?JU]>SDP/.D0!"_ieDaLKbG<fE][grl>Xp]pHH=SND]Ok?r[).C%Bb(_':+\Q988,Aa\*tjS,WU6tG=%ObQ\;bHaI6Vi0+c>"@C+c_Ama9,9l=dTIuBf_?5"ED-KiH5h!m0mPM^BHUZ_]h<Q'&DZX$)]%_4"I5m;:(,U/OImb@KhF#Tb70V_&HBm5"p^ZQ(d\*-5j&b+MJVf*"T/8Om6dWSD+Nf6?@2>*!/AVdnCX]+;!J`MNW)c'dod^!Ou]%nb1X\?L3:EXZA,\7+RXc`E=IZ<RAnbB.L3JC_E6Ed)u&Q-J*"ed%Ts/B;HSbhJCY#M[AHpPuNJ=B%js_Y0'??e$L*Y\?]R-5P[1K%"r5porZYTS0qY*%Y<f3H-B%T[l_&I9P0+rg<&)Vr\\eM%8>M/>metUTCJ#R&;4lH@T'*$JCOU,\@8H9mE6R"_UW?qGMdZh%dWeP@%d2]8[>$4A(,g,m)k_LLL78YDSdCJ7e,Xl?M^A##R[`&=p4>IdZB$BXP3Xsgrbfur!*TlL$f$c]8\@hN-p_".F_eF-OKZX5Y[Eb%n%e%NDD?S$CY>ugejm=CYb1bP:=IZ&QBqlD"n=PK(+@'iuq>jQj?!OTM""is*D+_UAbncN@oiTd3Me*'%DpYlh,Z@i%uA_c9<(hg7p%/K&4O_-WM&1KS+[7eUeH.6<[+S67<"QQ)F@[)dReb+O3bL[0'oIr(t;NEW\JTt-\g1\['65/b9@kU4;')b?99,d_X-$Tm"G@hcrR%#`!q`h?L4-jTVA:pHbW$=d[Q:Lj#Ma^WV<c'Z(Ji2qcs:c;3cJq@O;^Tan=iNpQLACH=8P4X)-_/aL>:a`/_^e,.dK+kFn1nO.N@%>g#qLX'p:Vf(<H1j-\HLr9=h"/VcYh^$r02cZZVG>gD9\)nI_%I348ciWSPn"n]t8`G.h;3`F)\o$C9$LKMo_%nC;\B,_X@V.%'a%[8rLlTR3MJ.i$(H&ggf<fWWqX'])G=?sm2biH4e\f]Mhnb2ioC]IBG.8E1P'lo7bF/^iCHA?W\d<f2joZ3U4mMp>bFVRJSM`<c,7%meA=h,;AN`@ja6"je@t-IEMm!h]:I%agTMi7-]tMjIG8TPnktAl_qLQj1%7</XkYMVe35p*8M;OWWjE.fsYk\4p'?3lA8V(@Fi=6%3t:9;pgjTTY,0++!fmL_f_F%'-FfE":=LU!?8gFpbrtHb^mFFU5Zs,.T)8qCfbUUG)!N'thAW_F37^53X'U)<rU^-`D26"cFX;QB%bSFZ>jHYoBMhbdN:pmVi\5mkE33,j+S2IuC3O_mM"@r6JK3rMc?3E8]h]7[mJYSc7T,9/;CW2"NXcsO9(;0Q!G,k)cNGi%+Ta9*$%?p.bANS.r6E3@=@p=QeD-.uVJo>%Y6cq#YAk-^-^7H`+<nl>>Gi*)FDS.;aa`m0?,T/lSP]F67%SSK+J:"W2l2%3etE\6T$:YNXO%f=[CY((q$_hU8gefX]j:j@RQH]5&;VrRI"%Li"YLbDn03j^nEr(s';L>'?mQ-qDn[a)lIZVtjH%=Q%`B(!U]iL,0^tCc][AjS[k1%qP%3-pCW*DHVX$X#>r5:o=Y4ndt&kF0m2p&COuAY[Q]Z=GDc<?N;G^sIUMR;rX,7")QR4dVR-,51^ei>DUIaiAY7ZagR,l/\rm-a%gEKmRl=Imp@"H;&B[3-:'cff:X)C)r>]]&[XQUp75qX-]@IH:1/?^&^_KqAH%9MIqn"\FJBt+4jmuqN[3?(`3$D4jJV]4;TltUbZ%@.Nb5gHnY7D+mOg]A&5E@_)o&l&s6U$,o7RVMV;`CDh-:7+Jk*eLp<_,c]FlWQ$=cp(LHllFFQWP,MQNVL&&?ekT1]3L6coWn+#G%L.E#.OJpkae+`PL<U5H^H2f-eF[2Fn)NEi3&ln7R_`$07-`YaoWKsc,>>A/"92c:+C4D>D>1Y36a8U]ZeNea:9sne;fP[EumHp[W%^i)#+or=V$2D@a]7+EV;M(6VZ_aN$U`9FZTVhqFE!m#$"0YH]tWn+RjN7DXCE]H]j]b6(O=e][.V*`2]3)R(naKd]u[C*cGe&>sg%W7p+cEmmG,-4I9*oY%!jpi6R*bUuE%17`<EZ!!)-1PD</"r^/_G#8<WeD=d+ln-!C=MV6`f^0(bV7.:+:B>)ic-B_[=h5TC]o!9M%!hR(8a0lX:<sR%-jAhG]Za\k8irG\<J0[61S&)EOJ?u@;[\hHp!h:iRPhp"k"X?"],*UD(n8--/MAsC<*E^fB?[80ZZQ4S&Q!LpY%4PR\$B/pajn8--Jb;Y#cRnTOtS8BjqXO*[nG1#Xl>7mI/>.%Dhlm;8_'V<"T]PISo2W^\,X^NaO@OqD[(ou*oT"TCRFslcq#Ju4Y%Q"b)[[KCKWqDD\[Uq8KDHbHB?)L/[m<a,;HY5lml!7"pH<R_<#FoXBXoBTTmT'ZNJD%d`2#s?rC3*Y]kZPGZMD2t`STX4l8g[,d^%Y[[pI[*'Ui/#"\>,g"oOlbg&g,anFeD[as8LofJFSo#"`<r6(<=?CiL6,t3-MnC:tc8LU.Xj3O**36e)GIF8oif7I-<X4fuA*&rf%'m"$BH.m0aGIDN:RqL&RHT!^kZQ2QagF.9SR0:,18*rjC0auYh2u8lI5VBK1FGus6qYhCV^"%.9S&X`8bWofmN:XOd?Nt&2j7"?c%*)bJcYPo"dD@rjjbD:-C<k'_(`f4*J^Hd`^F)7>%nL[-gFFY3P)W>Wk`44OalL,;E:,3`(NYlun3#lc?0lHV+q?t6ON3G)A)fH*=%XrrF.%QE*&M",V/fWBlF?d>on+i_>_H%#%D;oH3FmIbB/j/0ooXWtiVa!0.=0s3sAr=rdhRIBA5&E>:[*aBX=DOE(lX,-<5i0*F<%j"'&N2F*3?I,P#-0tr?!jo@.(Edmn'J/Hn>Ys1U7YEH5@IDiWacMB+;`c4CCcKXZ[\qk?mf9l/WqhXbo@B=8Vj/SC2*1F;k@[u*I%X@/Xs+i]@\_/G6K(=9G=ENe[N`m&?:gI@-?DiGXlZAl*o=+mHQL_t?<Uq3Xc(tZgpqA[A_FemT*,0"3ddt-QSCMP'42i2\;*&6l%%ORRR;@7/1@mJt\@!Fjh60@+eRj3-&A&M_!L^0;6ka>E/!p(68GKA4UWHFnuQOs>*jhlZ!rEW$482i)I?]d7+qLiN6D@<\5R-!^U-%^1M2['bTJ!/0nFfN$E%A`f0p(@N8aueep`]M&9;LJ?4h_G\+h'K9q]P+N@-_Ud%,'j4Unp'5n75Y!P952-@&5(ger5iMq_(Pr/$=%&`Y2m,5qQsNY+VhgWYYQZ2.>9\BAZZidSLqEASFK1]DTSERU8:XWtiNQP%8M`AJ4efWWUV`Vm4Vj7;'QKk#Uf(q9%Bh\'CGV>+P9%,K;=pO"Ek\)u6iD0b2iTaMIgVk\p\ENqWIETu3.A^p1X@LF`%&hS2F50-ABGd,@S[QhTsqi<n5gR-AsEk\p\EY+Q!-Nt,6IdpunD%1-42.Z@5_o\.2[A8*FnrAGoQUi<i6tao$XC%Tfmndf&_Qk\tho%!i<"Ys1U2.tSqpP5YS)DWLu8?$*SOLA<'9\DF+T2sBbuA]e53%%UT;k[K\d?C%fuWTu.U]p_l?0NmZh.E)!ZNC^D,"imI]0k\sI]m]E8%Q"OnPSAdt]E&0([CZo_oG@igm5<suSb])7<VtJHr"q9sm%TYm>rO)9aa=*kPW*BMu3HN":opbEr1m@hGb??ir3%Tfmn2Vtk]Tu3ul[U"!bJdlq`3P6t*gqnDWbNNp,Y,>rn5=(&TN7PsJfIApe%ECOtorsg&e3L6eA_\I!tIZ81X*H!IHC_Ih,G)L2Z*PQ&j[YPDpYi4?-(TZ'A)pHJ4WOnL1HlJiuQ,tqHq6u(g=!emC`;^/bDMR6,%%Q[jiMu=MSgeh;[VH\ql/nLm%DEnH0IRdF!8@Z<qMo;i0S\R2]oY,VQcjS%1h`K^2OOmo?%HY#WQ13/qIN2o!roDqPEn)g-Yr56(%qt-qMMS0Xee%i4'Tq#.'EuOMaSn#d]^FR7hdL=AuKjTZ^r0$j6a;rAd?b5?-AaS)^aeok>U`/W#8(8GSgoMR.E!CK`GY\Q"5E++M%])s;.aS[BR]!\>`lH;u*,lJ+AT"]1[k(3VgAo[B'6i4#tFL6u0NlX")`L@\b;1%.71:,UO*A8t'Nm%B/X_6[%V+kHp-!dSgP&_GG%hS^^VZP;?gL$8)F,BCYf_7a-t5`7b;9,P1WESHY-Q8/l!fBo*G*&A.P!V![k5!aI,E^Q:?N6Z`BY]'GG@c@ODi62Be]JQ,V27ruD%\"<9]Ek<1ucm`DUf]thq'n>[H3G+cMc^ET%d*l4AOa;jI^,Pd*a!@(_HCI?<FhfA/4-S6,O'm77>dOLD^0u=effH,6]CDf,H/?EL%1q?f=bM1eVbFdVroFYK^RAOL`H53jZWH3C!-S*d&ClO8"=0"E->B9)_^D2cS,eVcaNmq,?SB.43qui`Pna0AjnQhR92V-rQmaZ"H%/!$6_&(#GHmXVIj!?..J%LW8r2;,KT8"><X+ib]IQe)^Gm-N#'IcG26,G0H4p#_S5"%<33?.uul(Z)PTm5@.u"F+lGKOR$SGV,8l%P(acmle@425u?n$/\Gt#%?+I$DJtN:HMa/e]o)f@>AQ?,@k0O"=%@3V>M'P(d,PDOD1Bq^ZX4_UL-o/C)&jtd</sXVfi$@p(!Hch%\2::IbNkfi;f(`-7Q@gX_;(M`8Ci7u7G">flcnO%D]lWL:)9IuiSKBs5R2hgfJAPlWJ?nI1%sO/n?Ic=Ebqafp2-MULMNnc3dWVg%*S\E-!rQ4WQ>V#`!,C=2S*G*TV$mhHH6^in%g7f\od8k!h@SZH-mq6<j"jhqdt.:=B^%(j(1)&WPX70qKBZJZ<XP,"'N+3NGHKn,%1Sk"f29$Z`\6?NMlhng7/&f\8%`F[[[2T?bY]<SrebJJeSZcOO0[!f0\Fm7]AskBs/<6HmM:>rh9PDi=q87$.XUm7^Z#b)'FY,g-%f<WY8l0ql*rEXk(YAh65G+P4+29i:8M`;tqp7:V5-eC,n]f*?-Eri^P?H^@A[nY`H=OL9ZT';[@\@$)ii7I0rhEhoNJm)N-/[)P$%Y&+8'=Bs%mEn50t=uKIsiRp)%GqC6Zn"$Ch\nfuF/5PukZ=DsqU*Y4]D$;FWc?"@13k+L's'rY%HU$b9)Gn;OGtD6BY9.TuC/M$g%5HS<!Te0I=:1jcNJ9nZ=-3:l!^\=9AfM/Gr+.d%E^SWIe_/`9*RFSL1$esm$@#(um\ZcLjr+-[`60j*fEY-]m^9Lhg&4b-l-YW[h%@boPkEp`).(qT/57Wt*c4Q9JUQEWIef9WCOd2E$%[!TRU`6Q,T2Q9qbi,;bUL97Y][oq$(4;]*YZFg`PmI`X\Z0]fQMn*DKE^Up_%E<JIkC5$8q29_"_TlEO=/?X,>!:D<uk_Mq/ki_ZIGdr5R*A4J<I_Io6Z^Il7kE7sR84ujBpN.59X+/tSeWn8[X$q;3]$1`E*]A66%=QpN\$Emkp^.2PX?f<d)hs@rcO=<R<O@rAR7;/rr:=Ug%^dk$;6_=6FiA(5nd;H+-^6NNA$a%`AGrk&!):)`0>)@pFaaO0Y>0$tY%@.n^T)(um\n%j8sSiAi\fmDTG>g3/<9^sa@;h#UIHe$0m]_?&</KJrI-6]WtqYc6KZqJ+)cf`R)<Mu9Vgq96Y5#g4W<O_g)kn!4.%,1ha.O#+Q>j!,B0J(KDCgL3+(lFOWl^iOfcoi?JGdj`&pfbo"R&MLKbQ1@/+=q?0Pi7`DG]/M8e\^.nJ%!-Nt1S(*abFZV\ZYL)<%]c@5RX_=.P18cKnZ1_:1c?@5ebh;C.f6#_2%8@XG-g7q-*<^;L@D7ssAu`JV!t6>Cj*NA2@\s%lGjI82Po[dm!=[gS,H]K-%@q[X%,iF92T*(KQQe+(TK"jN@GQNM2"hNl^V46Na#F4pYkWDH;m0D>%4*)GRfP'sDId_KL*f2g.YNPH<.U^/g`FjGaE8UOlhM\99=`:is%G'WR[]f;$!p9-nAWiRRHM_n31+C>Kr7m`8%>V)FlHQV<%ID/XM*P5Wd$4jD&l)]*>bA``uh+[/eh8s"4:S6(WakMs'P)mo0leb#_%4pra\Q^,:tHWBAOh$`>7Z70$bBj85U/(Zl#%H^0k0CcK2k%aU]6$)RpC$3HNf!_1=LMt.c-i!B5"S")ch@#q5p#D7V(M`;%P`&30%,NT5Cpp)7]fmeck3q7kmPugbS'i"`jKZm`hoq9ZB;DHsMm#br73:[7PY>j\ur.Ro'7irZ"mL_hh54?5I44@mt1E;`nBN1&-:t@8]%ZC[WZpMOT)lSg"=_ot==o?H$NRnPq()$^KZ:Zn\IdgkXrn-SHri',H@6&'gFok&ugDt.9hZY6-^1U\`Dr&bQq_*Y31H^IQ6rh++X%FZ%33'>lEa]BSQtH^YD_#<*'<i9t6WXb0'>EYs;IN5sli#c`5\rG$G>:>Y-I$_O-L4FM;ip#`TWLDGgpk409P5Ahj:>5jpWb<:*?%mkT"kl]GTF=Q-HUkp+S3Kl,e8bD&OdFK(]LN"/2$fKIHSOT"uLHF&m\SsYM_"#!+#plisH6SGqDjSt157Fdts48"!qm4jnIU^'#h%Lu3hI\Z_@N,'b3e?XOmZ@H,]*$=+DTf+7DG-[8]DIe[9Q`;/K-N99C^L^<PGcK644-5tE5'[Gd_73J-NGp'9XiGSY[l9'fM]c5P0%j#`>L-U3<9c\f8.kTq/_7XhuQUcEkok.X.umIT/<2l=eTm/>7g*CTge%HN/u7F?=.EKRoU/me)b([6@E/CieG5M>Z*d4aaF>LZ#R%OR4'bMYJ`O^LZcD]kP2"g&!2)G(38,=(j.@!.V9CqjK&WqL\fg2u-E)[":dkbogpae7j)Z9h,PMfq7TB#[.J:;i!l(_e32fRsg53%o>3;=(/hhF/9$%`_l25(m=+u/q/#,]r0?Zg`e`@(Y%g4'cY$`&n]/W+F$+5O8mX"3l(WEQ(.8%OiB99mI/*CcO!bO]A)1R.02qDj%HY=8$bP^JbC`hJWa);A&ljU1/qXGBZY7*Lq&(&_r1sas_TdlV'p8!<'QWD3d46_Ogr?F@"%nbMIrJ\S:^h^$0B(0\?/\[gC3gn`-%[[t7Fn2qOOoU&:a]8qB6i29[1h5?2"S\9@K@M$&kGK8/GEcCQJl@-29>^8k_(ZcVfgfLlW@<3(G$6N\sV.8D7q`Hs/p_q+IIkhP\%D7>bLQc#F^T`7+jGB:58#*Qpu*6l[k*btL["T.9]O6-'%q!G'manJ-9AgT.M_Spo9(.;ts]eJ5(Pt@4R]r0@k[e3`bSXl%(T+CT'%&uKD@fM^Br27.Ru]07:tk\8Eoc*EVWm<uE#>.i=0M2utdI%a\g!a5"B/=q_pB=YlbFAA1<<IKsE56`5$h9,'d%cR:oJXu5jK8j4T%_/h"HBcQLfH_Z4?7$liTG@maMau`BUJV>3l>Ol$5?Mk'm,XIBkW7;).gD!_87#Ni9L\WG^m2=_5-@N)QF#!D(]:p'E376)5?*(jO%Qk8_I+Y$m^IR!L^.mY_K8,1>?G2TLQEkU>RKBU%0"*sE'9DJ/"*X8GsA\Z/).PE[Oa08E'3dWm)LD_^;hXj_EAH+gL73>Vg(:kY$%!VoK?r,Up_Hi5QRCB["<%%V(bHh"'iH,.l<MmJl@4Sa9uYFjJimarai,3K1BqPB`'K^St5$[VF)2-/@"CHboMqDtNmRISnr+k=Am%&+/hP6DG\L:(eAuQuMcqr8B"d4W>U@_>di`L[SCdri27ZF)XmhTs=7(C*-!Tc5`=pZ:U<a*$%p=k\.Ze9;feIHM2O=R&)i8mtbXb%(UJ+jpfUc?-scsIR2i@!jEHDIeKD[_G*(K$F&=2"s$!5'o>>qu+[hC<IiVgl,I>K@qJ^kN?Sop7kelq)0sPrScFmNOSmqdOp(5rg%/q.-qa/IC*P!N97G+7>4P.=#TomD]Oa#eC$*DKslp0eF`O=\3=fQI9W^4s+%/Cf%Rl08ubLLO=Irbc$VR\B?Wna>%&FjD;?bUkW]%L4se:Y4BPnDk]8lXl2f*3%>_*"eKa:TLJ`?l9bgAD[Qpl8"n8g=GblL:Q-OS9Q`O%A?MO&EASG5I]Ci.dEcU%\UXBoIf.>Q&om^?%fAFa-/e38JR%<EPmlNbs]6@mrFNV?^6=?JDU@7[-LY+@oBN'fr?@ceM1;SdibG$FM6&d0MF9)#Xd5cYpM<=PV*sj]F?fl5[3@qOd%IM56Rb(QFg5/*c<AdCSqj$150<s]?iFR4JcoJ'S>E3U/al&ij4gQk!L%g1adYZ!+6r@qSP]s30komMWAjpR#84($Z;1;?<h9)0!n%'QuU;J\.IHjehX/p3sBXBPEe5`!_B^o9Y4cH`2eH6m_N6ZKTjDp*ZRV06]q&kPT*M*u"gWqt'IJkcs@+J*Ro>eZ2+^:^Rl3E7UMn%b'rp#fCiM]cT[SukQ"/uOUup+8IUKYf2Uqihp8`[GGb#>f\;f/rT/J`E"[LWc[Ge'&+c@<`H1QZr\[4oMr'3d@E7Iu8'9Qm3CBCW%hCFc0Y#NgXdXK,:0g>r,M\%di<h*OAO,G*4LaS`EUro)nl7+((DK(PFO5?Uu)('u6oV:9FenVmUg7Sq.(YVO.r(fEMX39\P*.'o?%'g7?&OR`E-93udgB[2<6<Xc90d,JX1LMaEh`RjE^+n51($p3ql>F]a4D_ZiSVT2,Ab+JF7V<@@^g5F'SFHM(?Tel6dRSM`;,dOo@%8KWdGao00PeFV\jd\T?lYV)+[$n!4(FVOrS\^b,ce)L^5fgV&spPQp??>5?H/Gm:d$'/(V\(oe7d9eQQd2KXAKhek&#nrp3`B=>B%$DYsblu*e=XBETX6)p"@g%2"h1V;oD;6\lr6,0Y+@/!`->e@Wu@FEe8=VZM2MC0\C<Gq94?o_+AqdceSgni\+9mY[(*U3>q2c=II%0cMXkmCh2dr6g^.S;n<JQ2JVE:ouIZHPIQ>g#CHu/"<*88ZirqK?i$J"l^KYBD=TN4uBHb[iOg`oKCarGeXWgqBqUM>XjH=/NaW\%ig>G\!i=mhEZ?\-&u*,P$B-?iNYUd`PHYjq'C!PpGK9?bmp/2!TnDDUQL*f*?hg^V/)LSeB/%jF:7lUpLW=21nX^GHTXZ;0.WL3Q%fOX^Hh/7q5oiQ]-*52]UR+&2C<Je@=GI,J^\:*Ss(>iK>j:Y)A0S9mUEQ:9fIK-%$g*mE^)?TFEOUOF!H-b93cC[D0Y7s43N'PtH%;/1?rE9F]gr7O3`aU7jjKCTas/Ch>F7Q41iN,G@X".dB4)5.:n!K0`S(%"dk'"U<08U?f!HWDI"ao$IZo!>>B;1[6Trap;9@.qe@%6OTVZ*6B-m5&$c,hB3j(@lKsKKuPh:kCp^r\:t]e)l3"8b/7ttQttO>_!^e&>E6o"O0\l9:@Eqm]4<J<cgmER_qf/$Oir@Aa^hEX%;&([_a?h\s1llQ0rrV"+QVY+q9rItle\4s4JGfg`C,(ojRBi>:oqLu04%4Il]%\KG51B+e?`,\sk`kC5<%fIG[R+TdP/:8[pahhj%3__g[2D@^9Rg%^>=0R`Wh]Z%b.j:p5R!LVo?=kH+=m5&&MPPGi&ni%]6ieZW6n)Id#3VISP0eYTLcVZ_DjD'E-:oiY8jk*R_7QW&%l#C7>pQlmkCE?!uelSKF[/+oLNc)p`n^Y!FfT*2UhCa.CUt&.,h-rac24!WN[,F]%3VY&NAg&:4iWNl.A^]h,1Ab*FDI@MWS3fW:%96?)/Dt@+L4XB\\>u]Wb34.g&K4b-:/ek[g^)"kSZFIl>/?34*]\2kVoh(LhZD:X(F1V;>lZ<6%2<LF_cHNRsVO/*:/ST?QB04'R%A'sYqZi5,:[*%,<U1[\HfN#EHB?tV1_H>+/ZcfN5qT,Daeq[hCLdBpu;ZKQ06aJU#1RNi)dlp^U?)M$l<5>#r#/Gmm73X1eMe)h9%LO?T)G*)$]SF*"5jLZOhhqI2i!B/^n4?]3BI@iVhr"9=F1J`YVN>iWP+lOgC'mST#%-4qbC+#R`HKqM0Dlr7lZJ-+;d`EkD59#JU%HdiN=O8!QVc;3/t3W8g_cdhtbJ/1VbmdX?re6ZVP4piq5O*Hc)qBB.c;k;Y#;7??5*<Y\$cn\L#HhE[UNJ$l1G>QM5G<ZJ;6VeHq%Q/>)8Y#m9/4J@,dYP_\RGK"gu(Z2t2WU0FU/_G\6d2dP\rK8]0hX;1_U0kuJIm3L(%l_.N[#9$pqn;pHi9<VV-aYNb:RTW+iNGq&%2Z$GLSeCo;<<aMbTHgr#r_2\[.0^S)GF[ou$apu8\o5X.pG`,1WZ>Yk'V2@Rg:`W7!.FLTZK4e7,IFMdM!:OYdS07]:_cK6=ZdZS%:H4'jrm2$Q6?8Lo/:CDnfjTnmHY;5\*QTl^,?W(3\W=C;'W^>-T%X##V66EM8>kJ\0`*ed\uL3P3Ia<Df'Z#cVj*FtiZ]mb_uP&l%J]A2g\?!8s$Gfp3(gb,B\^'O&#MKT5I[-`gRX.2"rYhuRAfn?DIU7JMI.Et:WJpXm.)4A>B*U)l$+='TE^2Yr%H@E_r(LpkL#5rd%FnPZr6S%eP#K*dM)PY^;ikraY7K-aUgf5lSn)=YF?!PA1N?R6c[3NCJOGAh9B$sK-+hs.9Mc8uH8Y1F=+(E!3VjOW&l.natVQ78.%]?DkMgu;BMMW-HVgb^(necaSEXFJDno%>*;*&)kgC%'<n2Ja3#Of(fF+UP8]+=]P]EjP+.rnpFq2>qg>:G56$^=0r%k3_Oj`uio.%.,,:HNXfZlGBeFZci./Sp;EN]8#:IoO0dIAN),hbG]I'.O"c`nQTjB@,0G(iG%(=5Cp,^@agT4g1;fXubCsQhH(oXV&>-r8F5aZX%)'f_&W61?L/T??B[h)7.hpX%:!Tt@4%sO.$FHXSTUP<2Z%#o/6",H2o^(M:B1WWTVqP%EO.BI&S\(g+gJ"EVlp@a<I+.Zn+TNP7W%ATU-1-c3O/f/\2)Nq]2E*t_Lbn/fc$/aa\/aiV/e=I,drPWSe2UO"2>B:J8G23F,a0O4=+XeUUU(Ed+J.nu2O9J(JGbmraFEHqfW%^ht[!;o=fhoQX98B*X%_6Mg$;'3e/pA"4Ch#Kp-8U7RG4pg\-HFQ$lBODg`$]p`5=Y9/HR3nqsn`8+,_:^T?MViUZ^&mu;-Q20.)%p[arn]:CLn%Ea@1P(-=D>C3_YlV@6jM6-GY?l1J2n(/17+s(Adc,QZ%K9-nM9ISN<PkSA5jGB#G241.#V(hu)GjMQH/)=LT?7,OJ%>gh-g/^hDu`=Yg160^UC@p=lrf-b.'K7#V!:kjnr6+R9t%=Bb&>oAN\hr$(1:E:k]P;+tb9/YUUj_';Mku(SG4oCC#"=ebgr5(8-%Om5AfX&S&C-iO$"Q(L3;kTY6[V.]d9kfd8lqm`o*k:lhXn;g-^jJ*3I'U6(kg[)/3*=U[a83AogPF'm[FEMTnZj6=u,Wj(HK;C<^%PNRj535f\C*auX[=,BT/3$c10`/#Cu..87#dIMSOC$OqgS^G+2^9\25o+ZeK6/gWuHMiGU]+6C3.p='`=2PY9Hr@VSjR"`OIX[OU%`5eL>(4!7UA8:IZ-Q@JG(7A?<Hmi9H#JNO"Yrg9$L#,4CP=c+C6o3`r^AL:7D%OTt69L0Uj[uBCDml0GT6&fEr<jgK*)h,NGc8O8%IA;t?4;p"h.qNn0?T6M9[XWRN%8p;oHsh$Pha0DM1.7Um]urnaKp[Ut\,CD#SE[gUCZ+@_r/Q>S+YO^kQR@%)mpsa[r\*j=7NXn4%$[ca40-fQ"o7*CBi]P87R5jAiErm$;6pYobmM:H#oQJsWogeGC/*2Y!/m.gre/fF(SPH<YT6Yn@=q!Kf\NB&9A?%Y3^SA]H2/[V7%Fg's'UX`?a!u3I8Vba+cDq`OsnCcpBZU.rh`7,2814<g:oO`hJeW\#:D"-rMb^Nl"17@'VI7p-:&+TR8HVqlIc<oJ)$(g>]4ta#@%;H=q$\=!XuDD'C>M:kJur9,k?*'Zq8ctPFeI:i&r`HnY2S2kJTd3H=_@j-jNk#^Odgi^d^R\S+u[_SH3nJcP\HXFD,S;X!uNZOXm%Icf;'"0cS1hjM;o#>?ioj8o)U^"<ll-8.;-E<+.[=L]HF9+,!QFCmn><"ct@.S:3jm.F-C)GBkP-.+s"?X4ZmUcJ`i)>\[\6)9/j%K4,<r?HUddKm49D`R)H]l[T3ZSA"fJWeh-&8>=G&1ZTNbRJ\"QEPZkT9;e0#-4\.-"l<'X$&a7ehFQW>R!AJ=/U?2%b*,_h]OE)t%NLg3'8F:(,jP8[_;#E;p1oq_A[-H&dg#/Z4BTCE$Y44Wgem>pT=nP>48*\%c05,1(n3.W>nbHX9*.%f7j>hV]p?G<53n<f7:5.*0%R8qLR+I>$4h5Hj,P=Cu)a6UhN-=3`g^bbZJYI\Q64"0r/Y@776$Q&ErkD8Dc)Y>_*$XF1%_3]"8#O*A)&U.-"fg."/VMDXE$@VU4%?7/^P("*0WM>O_b1bCj6Z&ndtDKEVk,%S=u`c5s,'L<;@7iLA<R%F"UIYk_]1k/AMhN@e`'ZU!\H9eT>n(D7?4[b-nSK2WA@Kej?%_2T@Z!=s15RnSrA^r*P/aVX^MQ)sIOR7g_6b,>RVB.$5n3.1WUqC\B-jN4s0StVkM"Vtq$m))c5Ug2E<1-7gccJnZ82ic8l%"C6#%0C4D,*_h%*/gVh)26?=ZHfGJ9X<'r;oD+e93:WQ?X#q`?q-N!Z6(HOlJWnWVUI+;-D&80qpnT,@a]"Jf8KZ^q_q?-hh$EHcGhK$O%O2F:d>hgVd7MY(YmJ-?$G?iA!H7eV7]@#k.fIotSAXUT[FnLO&"[*'rd7(L<njd31^ZYB4LF&,02_HcPe#Cg8>g\h!*.RLWBFn8H%OMq1f5^!_,*G3HrD@,O,ilk\cC@ZNL@NhtSjid=07kBB0B[NTd-n8@Li/`A*/NX+DLSigc3u(QZUGj(QBJEF".WcnF4cYNgcAhu#%W@=e\HY`NJDl=`qpm0#4Z.*:OrMlOIin/a!)LM`S_`9lsTWBr0,,q^60kl-4@I+8W>m"kf3e&ut"0iJj"C!q/BL0YYQ\@B[YEHQ*%q[R\9!tP\`_k9f'i*h`eb+<<<]b_1g(+&4_V48H>/2=P`KXdB&03h_(0WWF==&$>bebr.N;@T5e^X*]QfhHU(T6KM)D%-).%]iJu%pV)7J+F+MO(Z=J&1nA[YI?4El-L(n+%N`FG4R^tHa,aa9oMbO(km@>aDW/J^pnP;]_<\"?cf+?\'[=ho)`FRD:G-X+3G!;:':V.i%`_+meodrgZ#A:_Z\sIkG.:-i!q.6L[ZiTYQ8^'qLRPTq\2Eenu%J88/^8Gp(g92W^fGD4[4-Bbp.\eHe*N!/UUg>`;7/I/"FQH]V%Uu'?Hf3'pqiTOY_/sh!dQO:uV]7]c,ne@+el5A-PV@R=hV)t1>+P#Kt/NKa)p8QrfaaQ,#&"M.i@GoUkUh`+G5c2'0T)%Qimgk@S%08t5KBD$@&1HP2fd6\Lj#tU.BnjP?$qs6NFg[0ur\-W&2H'j,gqnZeCe?!Yep:,<Kp_5)->gibR0('mGMK$[nh]OmQWA#Xu6-umb%Zd_X[d.Fc9qU6>P.5-62r'%NipCfYNIdH4F%(H,_/bn3B4`o$$AqfEnHsaHB]AE1Bn-rE2F90#tHB(q>XGd9L.ZEjOK?K?E_XZl$%UGU,BI9s[#qjH'^6F0RVAI?ORmIBcNBpUoV,5+Ys>+E>2%V0.FZ/tMRf[6Jh!Nu9IE9jV?K!fJa72_oG6gOK53d5#QC,V4M9HThg%_U)DB3j[8f9d7P:4j*Hp[COJ=,n2i:Y8&4Q?qcYO2_4aj;[a9U'p"5h<\Mf5h*?r743r+5P9B4c<r/M5d3odiPn$+#(?J=TR.E#W%HV,ulEULPsPlI:(9QD)e;\33Eb$Nf&]Z]/FpL[`B+C0N,dmn9S<X?qEIJF.QmPpK?Fe!46X*(]/:1B=4ZEhu"lG8&3PiVl+RJUU>%*N,9_f3h^,l!<FS[qM(WFX'?L^:f_tj[aT=:/9-$Nq?YA)02^?(fNE*/_H#hZQhjh7k2bI)+HN)D<F?4^43<*;OsB_o&6hJ9T8iC%4sOG9qV`%DFr7t<h07rWE!Ig>q/>70-G+^Io)#C&<pPb=XjX7&KlBY(/(=IJjX%Z2_X0;1Q]h6b9P$2IT:K0PfmAcGGL$("`4V"[%s8HIs6sCpchSD9t#68fcr2?W'J&"G=Z^?#H4m;md^8&;<K`fpn8ZX"H\R*8>j",YJebL):6Yej1^0NCA0*ZiS6O+,,,_6B!IPJQ>%o5/lsbBQ1+m`MZDYr-^M/p&]f.Sg^>:EjpVB9h2;>OKM.nsW_#NGWXD\n;#W/!me:5^J'BI43KF[cb"#&YiuN,e:RJI-W\4Gu7*)%;\PEIce!@71Qhn9aNa[&*lcBaUZHj[E$29.*9m1rgS]\SDmf;r/R>tBSeu[`NcUQ?4u[QM6MLJVc<Uob]AQ/uc<X"Kn4t$kn^`n:%J$h_q[.\9Ui%;RC$Uq\'3lF*ibsh;;jk$;8WFfXCh;.jIWHY,>(UGEqX_$oum>.oB]gqdS<O:LU3/c)CA\OOIDV)8@]iRFaiH"C-%30&J_Ra$A?=0OXflE=_Lf$/gGnjs9WpYKneqWsV_\^0S[HoD^X`_A)VNfE1)R)YU.#_75i/.VogE?G8"1&FcI)[?G;SgMWJ!Gi_]%^u]\M$6ZQe+97@'[gNADE?G8NS$3>*Y]1ccFMc[c!n]ID!*Wn+T`?t\"Q8i3#R.GP+98WNfnKP6C`3QZhSj:u!Gi_]!0E,IT`>.`%"p.&rD]]<oj$3TX/9[]eO905#a1%$/!;c\0nHW+\Ped<11q>=@^_Yo/'S1*:!+:`SIjKu2+TOc8HglN@;agcgQs?aCTOUP0BZK=F%M=(n]g8;hVT>-G#a?;#EAQU"#Ne:X$9oG]@jY'fX%iQNHi`d2E<.dD^MSCYr[dDS>f7iCr[td]"BWahsU-nZ]S4(<kQ*9<@8:RPM%0=sr+a@:5u@1JQ8#,@[>j!#`=YPjF,k'GN0:jLm90,h&FadYbR.39O((Ws&h>Qg\_,5C\@LOoCbC$b,,!cHrV,^=[.F8=0U5lI"s%mTgS0Zbh1Zl]humR$0rI0.rSmECtjV[T,RK1.LU@0'GCfEVU)/_Pgff:'r0?<J"hmi.=l</>"#$4g-t$;Ec`8WkR0dWQS'\3B<>k%^@W+k2D1pJfGi/H"MS1Zp?h],/,7)_g*6[rMh$R7LYjI%][ofj;g:>g9MiBq+,@h]d[3O^gWim/J!HU&F.`YsLC<qjB"sAKcGE+K%$2'1iDYtO%nkF?BpJ)2u)bk?P4(<m*eL>=1:la9lrlg-6ZR9kle/$I;-CCbIpA<JW1uCGUkDR'TN$:S.VNZ]>3^L*s;^,FPj4=M"%-0)7uY2.'t`OrrkU%9ctJ5D#@G]?[_p#H(#i_#nUFMY7)Ki)(A9BPek;+\/O?VI,En<*,1qP-sKT?bs*]#d/Fq?R"Y-/:$fGB8@d%rZXUAWTj!4\o-*f/ra,mO%<kDchCZ8rclq[ro6a?dF37&rZ^f+\k1]g<&`q4+_mAT<#^8VK*0j5U@?(>\23@+VgkI+DI'd<0^=f-%Mh9\bcJ6oeD[LBR7=WMVdDu9s(ePnHbs1DFQfpZJ;:3/7;>7Kqjc+8hTt*6dLuXl,OC7'cF@CleT&ncq<64[i7$N\B'1/'rh'"Dn%KbGI&H^kO8UB44`@aQUi(<(6OO%.qc(G:V%>g+e(iE/2P^I.Ao>b$$0Z*;:pU2Ja,bJlM0CflX:,5rT%%C<<AbfqHN;248i""4i#%$u-guTqB9Y\3OGI>`"@bGkV<eSd7-">_Fl(8(2uZ5V0ar$fO&sM4qp$a\`WZM'mr`4K9.Xh1?K(MfI%%94C""FiQI0E&:19-cG%Y%aBViCF@Or&+ssV`"QG.QNPkPD0JGX%%juTqV1G*r=4\0rj*[4[e@H;;)@eD%O4aXI`^<`Q*#1K,Pss4+1`iS2'nCiT@P\ot>R7,$%4Jm^#>\4RV0uPr@JY/XP7Tm\'=;Wap;iuTEMS#Ws)Ij'Ss,7Tt6$tf=7hLHjA1io;(Lu8`W\<:ek2:#AKT\=<$CK!jH*#)tU[^%Y%a785siHU;IPL#n*!cSOt8$n*?(a"KmF6$tI%#"=&,=:Fq0E^Z/>ShVc`[eja8RN;VL9pZ!9GFT;&XC24!4K*<QibbX0U3FfLe\%>%AN%TgW!>0T*$Ubj3?dt/-.E,?,)_21(^MDhK@u8cBfqEa'5EG$nBqXU"G(X#YqR(EX:ULaI<.MiL4bbJl6O4tK-ioQ;k8`aaR<SO%7A6Q:6ql)i<"d&]KsAE17M&sJ"OsW*-6O'oF"6\-c_:IZZks6Ba[-WekYVB?H(;pu0oGZ,)@)]p1d?XlHo0'@L$2!R`RBdcL)+5b%5T:mc7]-:bN^7F_*,<m>,'K0<@1Y"f`-)Up^qoINrrm'AAt9Naj_,[M,(g'EialraD@*Wh#0OiTO,%4Y^L3X#=TWR[N>1cr"KI=$%d!$8QY:2inQV!ir^a$4GTIe*;)&Ab`La,4pon#eDCEgnu%if\P9#RsT1Jt(qU<1Bm+`>.(7R^RPK:g-ATKs$[`pkh&-"8\X\FJu_%Y[gGk5XW^7SQMC)`ne.TjVZ5:s0o1Mg!qoL[X*OOLHT>X>08)I02mbGBF>Zm"-esHK2gB\\f5mB@]^ARHY5o_<9;3IrdBXhMQf%#%gIAVG.<]$p5UtEP^LiE4!JMXA4*n&Jj2=XsNbrhn8f-f\*8$.I6*`5mm.PeGEMI/qAS8M&cc6_M<bE>Y02l/q-=41]SkX:\=QEbD%3+c0V/]&pb2@hT&p?f;X`E'4SqACloChhH6!EBQC8iBID#76:QTbsi,Tm<eQh]L"=-uI34?7Rga73L1s>2*l3W)H#C9j#5[P^)(n%m\e=P<'9p(7OY\\UKGIT[2<gL24:`hWLajN@Y\MNQfS4V/53&_Zf`dS8;Yg^3DFA[L?9K6gHlRlDUj!$6GE59G%f,g0l-uBc45'-%%d>$[O]rqpM3QS9TXNdLqH$-g6[#4D\*`0^:"(C/CT8Aqo^t*M@`E$Ri70[iZtJb8>7%@ZS+5d0g&7[J8\[PuS()p"[^="G[_=Yh%%a0NS,oto#46<9hNFQbf_a?.Gk8TV>l&&0F1/=*b,h#EnVUCDrh;FX,TV)*S!=s'GRSH!ne+AWag"Y(:jP29)$&^\*29ORk2:c]8%(!3>7@XXjoj]smE%OpC@N)/T5_5$QKc/`Ql0t2&Ke+nnr7a3h\Ar@G$gFp8ROt[+8b\7p;bYg53AK<SN%S/J![[QW_0GR?hd5nAq%W"dCI^dPA`Xarr!6NYiq?*&cJ0u8QT[pR-6[^67TFnRc:&FUL56W(0/`&f'?i<7Ad/n8G=L7Q^.>(O=I%7YW8?R3`uR3f"U7:_W?%bk\ghBWK51%`T@;pm7i[1jWT(B/p`$'@cg)]d?mifjR04qp$&MO#bKE(sA/A3Fi672\fL:1NG!3e_4H#4pK!Y[@6S%gXb/%AFRge%Eah0>%#?pr)8n^[a.,W._.\OtRsMpp5S[i[HVj"/B2^NGAsc'fZI+I$CoZ0R4bf3PT].kl+%'E2ab!`[XZ@jM+6nA7]4B&-r./\n%JKo`[-cIptqQN[5anaG8DF4<TPl%!K3O>=3oWP58:<JfU0j1(GMu4'2o)"PMZV/Ecl_Tt#(i);*CQo0<\FODLL`aREN:DTU>#m:9%:%2"HU-D(^7Fo(;l&)e=qqIX*O67Ikq&IR@Toa9]^oN7eORj;rGd!6AHgH$5F(UG;K-)qdS7^HdBmA+mZb#`.SqeP"s.tj2&VoAQ%c89N11!+<SJ(`Pn^YCa@l>Z:?::(it/@2FO]70bDP-0P_E9UDtel*OgJ^)OEn^S^=5OF">/UALXemV+n*)%2qZ&\1uKPnSGNHI$>%;KGg]C##o&2j1H#"DKLsIV_nl8qYgPi'$'5p^"<Pd*HBoadDO?codY7%qsr2SgL70a!E(%n-&&c+T/1WKZ1ThLOTfuWdj&9ZW->B%rWkj8KA[n_ocTX.65A?m.jT4XB-5A/n"KLP.XlFMaWn6>k)<5qC]mtM^NtCiE(kkWUhIj]%YBh(ei*Yq*0`W(!L><1QQ@0^N;Zp0%=+)W(1kT2f1"PTNmM%VP[PV$k8B-+ZbQ#0W2jhoh_lQ&ebIWCq#b/&f,)'M>2StA&37]q(n6,phcs:pU!TF<&Ptq-$4=8m#Bs$hQ%s2`7i/ZSDC0Z`].'fum0&[k5PXfdbE<(uqTA9M<mB$o2MrMD+#rFWgn$WtIP%pOt6A_r:n(`Rm=Lo0LLdVR'6eFeOYm758**?HO!%7#)72Shq7G-jRIW`jd+f57eFcLJ5ddmA!P@L28e0N$O>cI:uPN`m+uF&;$Pgbh<<lQ&RG112%*iL/9h!Co6sEQl01'nA4Z]qBW%A%j&e+iAGo:64??UD$]4!Xmd[a1\HH+rXa08um;)LmNTNf'_T)#s.PlH#A%`&-!]u#?#$^!ZnD0i>+cL8,S&ObWYn6VOelRkM/Fbj"%+*43N3X!;=`_%#![,$""n/XEAKj0=.&2llGmAMQ2"3P3'?*7C6O/[YE@N%&u'Eo)c,E/LibRNC3X)LU2eDLIhQ=!LA^aT3MZPBBo%rLB'>1*;Areb5[@4Jc>eF;^br('j1+20HY>2u=bOQYkJ.QTi-7q<JAG?lAteGmZ`/?^dj;`=XA7q3d6HC[,R8,g%i5pg75oXL/o.%")#IG-Um00)GG#*8AsR%g+kd+qS2_C9A^FK5k`qO]#X>oD`Gu7`E@=_jEM6?DY7`p)hIl)(5gLi9t'cu/:`gi$#J#[(iL?T"Z%>[%IVa4N5Jc%[5\Uk.oXIKd)ZZVXm`-,`K_Fk-NfWP&Z->o6h,Bds[br]"S*hAhHdh1T22ejmogOERWKl0$',NMB%D1.(U3Uqan09Pe%*cNBA2u"6Eq0<6AS5]W\J`L6.:ei[fNKuOnk"K/76UKcL*kRb%GeY(ajha\t9\/IYfd(/o&K4qU;bj2u6]kMJD-D&.R*u?%.1!kZ%gO(#s)U7')[qL1n&X$n1!4TeW4iD$k$ES$7QjLMq-Tee<Bt1&[4o"TuQ[iYR)`[^G)VPH@(LI_JG1,&,-sZ&C5>pouRZfIMH/fnA%oubWo$B`@Y";Q[_"&puAEhEiX_8[C'?0cB,[LeV<=;@XD!TqU-TPRh5/*hq4^f5h'g,F`D%Us:]G;$QE+dg=M08LCq)\Dq?=J0O1%r-nho/rPiU9Z6(n65G-?2NUONX95WhKSO5W7$0@IY/.mTVBc-t9kZ?,^Sr6CanMDul6`DN=L8X,$lAu>d'+.G8H`Eh?mjtm_@Gau%#$5SKi'KhHRY*>Sfao'j4FVLM&:q$ikK"->'(m-fF!.Q!@4=$iklZ)qZto"4(=%r.624-f$NgNIDd0"L((AN5JP$Z4A,hsN5IB?)%!"d^6Y\AH$-JcGGFp<Q%*O$^!acm+hPe7F_'LjM):L=Qo+k_pEHXa#(g(nN_a4;rG'>=jrbGDo0:mG!X.e/,Li(t1cnQeCd9`X,1%G]uY[M>H5P'bl3b7cr$<gV5sH"'R171Y^?:kHL+L;cZ\PJL2d="EAN=M,>a)qR]i[!SFk5fh@Hgs1g<Xl.RF["ps?]n$[PQ[,BA`%Bd''^lGkFY`^X-(#dUn.qVO5_TGEQ\1<)`3Joj=[<f3B7X#Z#+YR0^7h5bLn,m/]SJAF!uru)D_m6_0a0B<!:.Afh^R!FUqp1Cd=%p-)/)bQ_NTeo6pMi[pU6Do9*rSo@#a6tU7gSPA`.7Xu#Q+aYFi6\bP@.QjbW&Fci]b4LW5ju*PZA(&B`eDt']pU;B8?t/P)Rr-XL%bm;4gX83sF$#qeEfL$<oN5<`*2A=qu'7@j"8FAFDndt]0EuZ10f7oiE`9CIlO+DX*Je&>ee9<@Oc%:C<AOAt;s.`=WT_.FI/p/WA%R6TmE=KgUNX73&?#6T*7N"8**WJ]+tH\9bef"N:^C-FjB-rXgV:^6JG#8/O><JQ4<Gole[#)K=iEt-80'<R\;5Ef%lij?p9KL(HE%&K0^NBu#ZoMdmHIZekq^<N'^^XK#X6IpJO!"W33VcSf8B:?;!!/LqAi>-HW[P=[!I"DE34>C_`X,AF]T"p2?ijF:#>&\V07,6N7a%@Va%7S(<C6/DcmZ5&ri[0B<h_"0T^,&3H%im%Nr>%\(Lu0?EmJX)\20Y31]DjHJ@(GD9aHN]@C>Llp@1?s-D?giZg-ir0g`%/@']%'L2MQkmOfYS"C)!9L:`5^Yl:YIV``QQ`tu?Z]gShJ",\CNP'ET4I8(!nqDA()e8&lrs4W\OBB`$%[3OB74JRWLHI9i!\s#7fT3qp%9PL96md"-YE[]^0&(bUdD%$4@FEe6Y0h>5`pDZ1GJDXf(RE>[=HL3jt/h]mE2l<_8:gk_Fn1u)8%PMQ`m&,fB&a0Oh[9l%u[T-Zg%V(5*(a>m&lETgr/$C8[L_<D%FMeD8Z^P%mNb_'I'Y,Vh*/2iYJS0+pk$jj5GU0h+eS2-hn(cj9)'IaDU2Z3Mpn4<tI`aWhfSM;])%>%64%.(_?7`c-Q>>@uSl]#GTlK"U=j>Y-[i]BKcl;gK.7`Dgq(VD)L*&kj.Go)[fA@)g5SJbto,I(u,cDrd!RXr)Jke(#kQ[h&a)%&"&RaAh12Z]Bb-,=r"!Ei[+t7^H2+ooAX`!LcG^oMkD((iJ&0C"haOPj(fh-=a:QHXU*$$AIC'^DBpgm4=$/Z+AZ58m0<[hIS<A.%quLnS=bhS+ipSPF[Kh]h;m_tUV3+Y,4<UJ@IK6%0%]s;,m"U%rkptn]JV1el+FuGo-je:9:sb3,9Q&0X'cD8r3I/^H!dhLW@R'Vu%5'>sQ!=tH\Fk0NaaJ%uX%ct=nC)0eApFFn2?*l`bUrAICag%s2H+t]6!le*/*cP1a*/WMuiI8@&oM;fsO!RD9Pt0;)D+JhP/+ZRm%q9?MT.5o!H)N\SG<\W?iI,-W_.XO=3:U<>#6Sk5P?:K*d$b%?H2.9,<ZPW2VAe)6VKLcs"DBD_O`(`SfYViM+U1\DU8?R/j865Xd%attUCBiIPR=U4D+N]/AGU5!i'Zss@&K;=d*%p@<AHa2Mg9SmIo6K.l:q:-aX'2Y?Kp[kdG!T+uZ*dh&7e(e,?E).ERY=BL;5fBa;%R4EYSn'l#ilX[qBD=c[o[,%RX7HGGbHXM?::R5:]NZl6_.a4:Gh3qc10l6(q-j?TnSpbpJ(B-NnB+?MNGY&Ea%a`#4LZ#eP!LV_^%J;O>V4JOa,oDVD.2N2+VOD9V;6SRsDE]f\siNSKu?'M5^n/mIrZDXIKa\A9HVa\Hr<*O\[QgWAFC<Qd0=5M/MF,,JSnr!KVLF%TJ%&)2Ki$Y`*I':hJYA<6M"Q8>4.Uq/UcS'fBKXrhJOpjhk-YJ:3Al=)^*'r;RrSn=CL7Z`1*WQ<E@3Oj<Xf![#FQNT1bKgb[L:g!]1%Eoo23p;':!(eRiufA&MBYRWii7ZB+1MZj[EH))?dCg6X^2U0B_Acti\!J]HbKaKl"r58Zhpg"BG2jQmL?Tp6Z;7ArK`)LosH!oD>%/)(?c'o5pX^S#Dr)r_a2j><gOer#+PfEjX=)B)F5b:+I3%0F\]8j0jU$7,pDJmOj:Ch<gk/L#]=r:s8#C;cZ9&F>JjQ3kANJ\g3#%BN9+S>e0d!9SstmD+T@s'aVW/>\>]FrV?le,E%;&;^CB02LnW$6;\8bYg&@4X:"qlTL07'10k<EP`P,YiNs@t[)ole*9a&V)L?#$%E9L:XU:aY6fua6Y#Lm7k8'<#h?3uB-5!`4a>S<T\>`#0M.,eAm=scd(*VVHaAdi#,$mAc.aCI\a;+"I,]gKHp^HG&!O=joP"F,4+%SaoPl:UUa7rZH>-#'Fe_Tl(>[c:t/AKZl**6[0t(!=$@u2*2?"i>>T*FSPH8e``-/o&ao4-qJ=P]U0o>&N![XL2\ko<l]]<$+-Bs%26TH'i8MJt\g7'n.?_!-U8S\$")H3G4e8Fo,sgFF$54eC)J)D:V*.<c0&u[2V-s+jE44e%*noXL(0IMarB$kh2QG-uQg]l6o&Fh(%"Hn]Al=LHTlr)A)ANMj6.A[$rI8`?$<9XCqZ:l"&;4ju@dk,4I_9+q-oqi+_LWU=;f1J2jI)G*%<k2i_LDA(6)V)#7DZOpaa,F.6%YD5the\>9'?GRE!^WMB4&rb:-NpF<#KXtqL!D:3spIN9cP2rl/!M,0+TWd3jk&^YFUQWLmA)tX)0Ns[9bS[]t'o*\nPs*)ZA@Bpb%hMKh)Yn[lg]E?i'hMJkPQ.#>#r#1-+Q3Q9o*FJ1Ph'gmE0WHH%nZqjMi@H8&(ZeE^Q=\GnMh:)(CWs!GpD^?q8;rWJQB8sO-k7`d%2)$@>!?>dMB$4Lu%@\Y7qbXpra86$W$-:.Xd+kkmEM0DKb[/-RZXbXF\[D62HL?r/?^u!a"<gOX2Z)f1.gpE)_D4arhMIpn,pRmb%/\l2:#[(i6QgR;"$%fD$m8ap5&462?BM6ao=-AnW`E9W>6F.8Fif/O2@l$8(,^1F4K,G"W77]68O_#q+%,9%GTFJ\M#WCd^cmsi>%a>LDbk[rao`=\0iM)4^@:)kOib=h@TrO$$!H7UOp4lpGdOiV$=5)a&=q)H(R@o,fs''4SkKrX$->e<0(2+[1X3\f+D!SForE'a9M%??I6Dc$u26Hq%)XK@$7(CFXQG8mZh1Z#g&*n5&Rrm>*k5#k/(R]^f/KdU4jTI1Y>C-,g5=,bu>!.!W##4og^S0AcoWTrCV-&HjBN%T\Fhk%#YE0K%De8ld<">#`@&@!L+1R2:?m_5-q@^P-QikCaNp`OoGaq4stSs2OMH++RS:F72lX#8Hc=Aj1#6&=,/8S1pLt^+AG9p%Diu4dip$>3&u;3@rCmp#62#PE"=Q%O!k4]m;YTP1_>dF98pMlP<s;#U?NCI139+.njM&g$,tLI=^RHQ@fhpgo-GZIYe\5Q#;KapF%Z33X*("gV@Ua/\3AdOF9Lu;kOMukWH8HL8%3<H+K'L?aYH;Xn@kuHUL!H'a1Y<3[(/.0'dL*.5e2L$t[WG(7aJJ)]i$%G&9O$`TK%qjS`_dOoT)hfOF?-V'8QY517@![E]MFM$]A&oa!kDN4_K!ugk%EH[9t\$=N+&L8W+Bo"oBE!Zb!%arT6(hGS]Ul-5/O1]g\"LruD%R3+XRK&d^Q:Q?PLq!I2*#].#uR=74XK&g9/Os"mQDEJ4*gVo1g=\k2'<I%.0)`t:SSuMd0-'%01&qK'JUD;)fhu_]r&LpGXD+0ps%8-*,L#"M1@!#H-=$R8$CQYJEsJm^7j8s(4JW8+L&4)gXN)fW[9%%t9:<V6&X(32Ta!@(a#5&Xa-dn%?XPnr#r(X4lh?n4gLn!b$D%n.m=iapDm[&u9qN8g#Ek<c:T\;Yt&/;ASQtAd"b`Qp<kRJV55-ZlcBA[mF^&OqF?6gMbJ+6B/Xu,JoqC,Z3RoV?F]/0M3]=OB=KN%Db@eNZUd*KPQ5rN$#oF!!#`AM-RAc+6Z;Ba#oJXfs%NebHsDUm,nQ:g,nQl9'#:2R<g.c#i!4Q(+XOAkHLDNa*R]qk2P]XYR9@-e%?(GfI[V;Bkj[f[C,kd1%^tQB!G<l-rN;jO)ZUe7Kmdn\&A:!eH7UWUsU]K%Co(HSpQ=I'&hHt^lm)]:d;B.@KSSss378=%p<SP@H%hZSIlW%ee]DZg5i!WV2/Qs6[Xs&X1u$LiP=HGAU#r?&n-rZ@"N]*OZd^d%;3VZ,TS$[^CSL&DgfZO!94oj:E>R2>L&9napFq6)-t%+<Z/='N>2MLqcfEH3j"I9o8#JqpC-oFl@en!el+)pS3^%,LCnH+ZpS-?UZu^MtLREi55]I^D&g7d#TLtk)8ga=C-SDK)&JKjsEoR%>SVsu]cd?t.M32QhqDYJ?:4\tg,)*HnEVi?4okWRn3=R'ged\72TOX*Eh`b2$Q_n7pBpt)4#$b]-`o<s=:WQF08qu\kk5%W!88A6%JAM@d8+k8a^Cd,&fR+A&$;;P.*ij[/L\)`dPo1MaqJ/XV"JB["8T3PHq.n+f%mYV)i#6k>6Hq"[4lC\n2KJ1$c,Xs#<5(D\^Dm[k%/0?f1adReA0@[>qI=Zbjd+^T@5&RpJ9Kb'noDf<M61L9H63kGY#_Cr!,XM2F7;f=`r,o^9JFG94(5W3HO82P%I0/nTKrHJ(&,`$n%JBL.GII-n%e(7R<nUo^t7BS;9&4JS:rPJN*Z!Qc<Ua"]&cohY7G!X24#k1t=i#\]E05PQDAf1]YO7ibE0?#fuOou##cSfo7+SP_m%S.B"gp1+2jn9VGH;c3YJa$^$3kL*Nq?p.0jDJ1&l*X(#_&?/1+0QAJ5hV&Ga4%p/O;%4C?qW7]sJFmVl%kgB_DQi;6oJj5%WZY@X%6^JW2<T004<D:)OE$QGqRf'+AXn>t"JZCfA>R5glD.SY;G5gcaTNilG=.KPXG<tg^.38b*IOE*X(RYL3c=[.K3skcn>TR_r11+-)%PgoCmjl&i`ju<LdUHSCAJ]WNG'Z)SM/9DOE&gWMr,jc`F+M`Y;5X$S4O,m$H*7&WBR>%p+n$WI\#@T(e(LT@,j.UtnjetouTQh"L%Rs-,!gZlkdJGAMS[K4;Gkb^Kkr:!2YZJ1Q"GmBF"j1(st^\f$"]IgLdg<h?dV'm0H@Z]A@gSQfkr5JG?-97;F_XuGir&9*(j$\?S%O:J+c]EKHJ`6H<'Gk/.a:n73-,D?@Wr/Cb_0iVkp?5f2"(F;n0SMfN'X"OKWTtOU%f8.W-2D\Lm6POgl*##me"/EiV)qfn_-)/bp%(9/b8W%mD`5*Vc+-EjfVN>,]T)tLml_%BbE4>q]CD+Ya3'OC;u.-iX@gM=^!\j<hZ-PO6%Nt%Q\'gGM";l"E+UJN0E7eQ0Iq56Tj%7tA4=V8as8:ujDpT/br(d\s/N$jC),m)kBU#cq>&Q82^6C(8dqnB0Ob!>=sl4PO2)>GOIYd)Jrq,o!Gg=m(g/8&1*BDH=7K;%JE2%6Tt\.;B]S=Do6tJbgHl>.^m7Ms&PgL;Un3td1k_<iBEkJ,2R'[![CYG\,%E*7DVj<N0hCGa_&efXq-"?jYp'S(;j0=.o*iq23k^<%Rs=PSXe>+s,'q-JW1qQ&og;IbgY.=2YY`VP-m7S$[P@_(-2%d$FTan2D*s/i'&@lW!c?QW"HH?14X=E<nEasg#t)W5D8,KOa$72-%'=`E+PXkA\We]KG#,lr@[/BgY0BH@d<%li]%MSDNka"Y,5hO=E6W+:#,]j="c&5rmeeQnq#e=;CCat(P]8=\dm=do14a=)B3Z].<%4qB=]PjH6Wk<h#L!k#l%5nY\pHq+5ZJq?F29oQ^TIW8cl'nl"YQ3?Fk+2?5`9NU^ai`9V71ND;p#B;Z:!)W:sYNUVSHme=`-2.IF%ND:^9%IhIc&3Q.k4#9:W6Jku\?A3F\U!tQ!708$(#E3Hl;0^`t'b7t:)P0=,h/t/;IJZ/;pgtYQg9%<t;1tJNg?dibV^!NY>RA9o%SJBsW7!g?.bhFQ&LM5``@oV30M'*m[l>SSN:iL?T]4)mK%P_iC6AGa*d>*ma#L3<ZY.e8a"/Y00hg.ikFAc(a\i!`4G.7_92AG&5%rr."\T__?cZ!cj"!$4Eug6Y'"n-E,.T#$um'ZmTn.\th$kV3,O4K$7^cPhSijr=a7<FnBgHT$A1loAsdiSf;_Oa*8H*P(;\6h]R_%#ufeZF)2OZc]DE$,6AVnE$+.s'F7Y!<5I,0?T:-;&&MA=LB/j5]IH_#$Z5194hZ_8#*.r55bt0gcmf1-kV8o8E/PdM_e]Vrn_UW&%X+Y%(Jnkf;#:*A&T.e0K:Q[7lb,OU\J4G#&+]X.j](%9IPXiOt32jq7GS*d_Y=((e.DW+6DNRnoN_NEm2eEB=ea++T(-<]M]S07>%4X_N=cAFPm6&g(@qgQrk?'H2bX#5.Wi&X!bi+)ccOA>5&\&2YEaiuLKW#-L82AL/g9dMnn7;uGcJo\iOb971BX7BQ_]hhBfJf!dI%U-r:3%K<.+5ld:gXC8bO+>rW`FHem'WA7f;-)!uYpbW`mqN].<Os3;_[4#]AjZPUk&KJ-$?,tC97Dr]rH63D$Dh*]Fq0La(SuhdM%[,fGZrY0FAa2`2:&FQNuqfE8=!0NTc%TOkQ%S_Z96o\<LW_>MsoY[9["U4Whe:ZB&L9:mR=B(\W=,A;+R?%hZPNAH3+U%@S3.2rn%%(h-V/dhpGZ7q#0SZEZiQ&nc[+0SqF4WYC$dgtJnh5K6MlP@I5`2^;U-8$^uTkOb7Pd!%#5*Yr)Rpp';R,Ta+jm^0q)0hpNW_IZC%2BRIZpY;4T2M1uRRt^FWB04eloE>=?jWbT6jVmrlGt)n/%S^8BGfFAi4/H*5<nW7)W+c'T2;TR)h@QC&k<mDk:h,HA]9dVKr)XsE%kIc,Q?3?LV'QEYA1'pZ6d!-ejG@S-V_q^BYPdP,gOulhm>6.]UUc;[2`:FE9-M3cP`/cCa6"XPS;E$`&e?;1GB"4!&-!fsbR-Na$%ik^c;1Z1hM35:NT_.qEg>fI'35,8%S6m)Ab)sM(N[0D?R>io7*J2]G-GuUV+)4hSSPm41"nDXP,#@AI8<E02'ma?H17?e[_<5q_`%^SshGSK\/@i9/N`NBr-a0lMaHl>a-%\c@.Xp*AJ.N<02]S`.hT;dY&!/*;&g]Dr[X>BSk$?%@,(0]"625d=V<jVAX8i>*44-&N'a%#+d&rg&b6c_,\1V"fRh^bj$WCMRoWVmAS//4=W$fPo>>[W&O8KADaYcb6RZ?n>9mIh#hk%:jg]_\qB"gksS)DSuaGA.-E#Wa.o;X%YFnb.<DS.Cn?;r&S,dJsB&7T-2*hh)*45pI)<p7'!+san'Hsl^MVn`24>d7QX1mha&F`QUF`/-5c`ot@6(+FiU4/aD]i3tQ"1B5_%#9K-2/8`8q$-/_k2(A_+$SU_%dXe.IijWk,bd7XLbIL%fVkR/*>_qB0@]t6!B'UPaeNst@o1Fu!/6meuT8SD])#(RA#cE?7kdLmp%qckUmb.Ua;7s2!LY*3BY2[YmXfXa!K,;"?s'J:]$hYW!*o'WIsaBNo_W>p/?+JWrW4#A5V.NG*D.YW92K!3]gFTYGCgQ`c%#,"*0%IdRf6G%.$k)PC-"j7rm<5TJur7LRAaA$W$M-rWoE7_o(2(NJ?(o`BA$U\Qc$0,KFGZ;7kn;7>f?$Ikl7qPR;c-GKm#Plc3hA3F!!%]mZpaS.IOZGlP)?>*MV^ILqhf0+DMVYMe9Zn"eH:&&n]P(i(-#.'&`q.Fq:WN"q;9;`pg@&;0B0`J.6<(!<Fc^!ni!Io2dBg:X.G%T%*L^WI&kDL,PZ8rg-$3K!&t0$N'BDA5=sSAOG.j.dr:md6?/dS:\#'!($@Hai"+dBMr.M<^pZ:pf`bO5>uPHa]n6uq^F]P#g`2*%i@mdp"V4Dnjd6KaFNLGd2p$']kFDmF;!&J)Ai_G*$'HnTk*+c.BU$L&k:M\_4q?g/e@/^U:K7U21WtDQ@'b+Ds*>b6nADGa(-RP_%]VbM@:2N$AC1^@q%o6_[pWY;*'_uKBPIGG@.IiQX.Ls1X8Ffa1=";(YVZKeNT3JL,Hlg/<Xl[&id0!G,Z<rO`n;BYm<W%:\q=$Lr%TU7>nb&okcX;=[M"6:H6H[?HF<@g8e*L+/bKqQcJCH_!3\(X-&]@0>Q"O7glA$at>9!i9``Uid0P*7M**fi/Br>Mg>.OqFX%<h]p%d`?'Lo-/H,]_H4WC\<K"d7So#m&^WajFA57i8Ue?o^/&;OqNO6cl3(7J;S3C49ZP1Sb0LQ';h\YP>iVFmbnMo)L*rL2uad-Aj9*k%`e3Z_p7)s0hTNOm)jt=tg(V;&4lh/q]eUIl0VH<dhmTPrU!p=J1T)c=k'T>q]f?8HS]SK;G\h)cH(6bIQY-4eU"&4_>!ih/>)T'.%cr93,RY!9Rm71/j%*.N(_=YDV*1(VDnW%,Z[SN;!]t>X%pdUj"a[`&'EnNe/8(9H=-hJ`MB.;j=GQ-EN_,l&I%;El2nDg=2SK]BA%onFij/M-`VotKUkW)(S$S:^Sgi:POJ]5Du<l+^C`0=U)-!A#*S"q8%S5$_UB!G`@':`-pYA7&+0R=rC@PE7`[I9`SpOSfM?AjD$o%%3DPC0c),\#W@HfWdKqY?@gHUEa/OP,4LC)+3a?YL>PC/R^$coK2)d2!lEChq>P(;:4C4#MYL*a/"((ES-rhqj$\%bJb2*9P4M)g%!S[#S)"40I$f6-8T,$r2Di`ln:=;Bls27EaR63e.=SIS>pl<@q_Qj-NSU?]A<VUsS#[2?mi:ij_-(V5V*nodQs6`,Oqi<tZ6Vm1p%:#hS#]/lM5Mhh.GiU/NqI\Vh9:&TM_cW1#8j#`h(c6GIcR's1;7H.Z$&Cc2N9\^.e]&[.+d*@$:5dW0XG1s\kqR?7b)?%qAo?[H0%^P;?`J,LJeRl0*;rUd!PrRYEUo':f&q_/!8[pT17dpN+EbQ%P6j-RO[ol'm.je'<eDu5l^^\n&^J,JnVJ,f3%+91qNrsoh0&tf3g%:]L8urmO[C+'Ms2=o~>%AI9_PrivateDataEnd